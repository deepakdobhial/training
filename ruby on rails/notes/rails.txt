-----------------------------------------Ruby on rails -------------------------------------------

1) installation- gem install rails

2) version - rails --version  - Rails 7.0.1

3) install dependancies of pg -- sudo apt install libpq-dev

4. install pg -- gem install pg

---------------------------------------Rails Project---------------------------

3) Create Rails Project - rails new inventory_management_system -d postgresql   # optional -d postgres ( using postgresql database)

-----------------------------------Database-----------------------------------
1) config --> database.yml
	
	database: databasename  #inventory_management_system
	username: root
	password: password
	host: localhost or Ip address
	port: 5432
	
2) create database --> 

	rake db:create            #created database databasename   #inventory_management_system                 
	
 
	
--------------------------------Models----------------------------------------

1) Generating a Model -(command) rails generate model Product title:string body:text   # title and body are two columns of table [optional]

	Output :   		invoke  active_record
					create    db/migrate/20220122070723_create_products.rb  # create migrate file inside db <timestamp>_create_articles.rb
					create    app/models/product.rb						# create model file	inside app/models
					invoke    test_unit
					create      test/models/product_test.rb
					create      test/fixtures/products.yml
						  
	

-------------------------------Database Migrations--------------------------- 

migrate file : 
					class CreateProducts < ActiveRecord::Migration[7.0]
					  def change
						create_table :products do |t|
						  t.string :title                   # title and body are two columns of table
						  t.text :body

						  t.timestamps
						end
					  end
					end			
					
----------run migration-----------	
				
	syntax: rails db:migrate
	
		                           ---Output---
	
		== 20220122070723 CreateProducts: migrating ===================================
		-- create_table(:products)
		   -> 0.2036s
		== 20220122070723 CreateProducts: migrated (0.2038s) ==========================

3) check table in database 

 	syntax: rails db
Password for user postgres: 
psql (14.1 (Ubuntu 14.1-2.pgdg20.04+1))
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
Type "help" for help.

			inventory_management_system=# \dt
						List of relations
			Schema |         Name         | Type  |  Owner   
			-------+----------------------+-------+----------
			public | ar_internal_metadata | table | postgres
			public | products             | table | postgres
			public | schema_migrations    | table | postgres
			(3 rows)

			inventory_management_system=# \dt products 
						List of relations
			Schema |   Name   | Type  |  Owner   
			--------+----------+-------+----------
			public | products | table | postgres
			(1 row)

			inventory_management_system=# \d products 
			                 Table "public.products"
			Column   |              Type              | Collation | Nullable |               Default                
			------------+--------------------------------+-----------+----------+--------------------------------------
			id         | bigint                         |           | not null | nextval('products_id_seq'::regclass)
			title      | character varying              |           |          | 
			body       | text                           |           |          | 
			created_at | timestamp(6) without time zone |           | not null | 
			updated_at | timestamp(6) without time zone |           | not null | 
			Indexes:
			"products_pkey" PRIMARY KEY, btree (id)


-----------------------------------Create table --------------------------------

step - 1) ruby generate model Category     # create model Category

step - 2) Add column in migrate file

		 class CreateCategories < ActiveRecord::Migration[7.0]
		  def change
			create_table :categories do |t|
			  t.string :name                         # add column name 

			  t.timestamps
			end
		  end
		end

step - 3) rake db:migrate               # this will create or mapping categories table in postgresql


---------------------------------------Add Column to Table-------------------------------------

step - 1) First generate migration

		syntax: rails generate migrattion AddNameToBrands                #AddColumnToTable" or "RemoveColumnFromTable	
		
		# create a empty migration file 
		
			class AddNameToBrand < ActiveRecord::Migration[7.0]
			  def change
			  end
			end
			
step - 2) Add column manually 
			
			class AddNameToBrand < ActiveRecord::Migration[7.0]
			  def change
				add_column :brands, :name, :string                  # add manually 
			  end
			end				
			
step - 3) run migartion

		  syntax: rake db:migrate 
		  
		  -----------------------Output-------------------------------------------
		  
		== 20220122095544 AddNameToBrand: migrating ===================================
		-- add_column(:brands, :name, :string)
		   -> 0.1144s
		== 20220122095544 AddNameToBrand: migrated (0.1146s) ==========================

			
			
			

						--------or----------
						
step - 1) syntax: rails generate migration AddNameToBrands name:string
				
			class AddNameToBrand < ActiveRecord::Migration[7.0]
			  def change
			  add_column :brands, :name, :string
			  end
			end

step - 2)  run migartion

		  syntax: rake db:migrate 
		  
		  ---------------------------Output-------------------------------------------
		  
		== 20220122095544 AddNameToBrand: migrating ===================================
		-- add_column(:brands, :name, :string)
		   -> 0.1144s
		== 20220122095544 AddNameToBrand: migrated (0.1146s) ==========================


----------------------------Remove Column from Table-------------------------------------

step - 1) First generate migration

		syntax: rails generate migrattion RemoveTitleToProducts title:string               #AddColumnToTable" or "RemoveColumnFromTable	
		
		class RemoveTitleFromProducts < ActiveRecord::Migration[7.0]
		  def change
			remove_column :products, :title, :string
		  end
		end

step - 2)  run migartion

		  syntax: rake db:migrate 
		  
		  ---------------------------Output-------------------------------------------
		  
		== 20220122102705 RemoveTitleFromProducts: migrating ==========================
		-- remove_column(:products, :title, :string)
		   -> 0.0593s
		== 20220122102705 RemoveTitleFromProducts: migrated (0.0595s) =================

		
---------------------------------------Rename Column to Table-------------------------------------

step - 1) First generate migration

		syntax: rails generate migration RenameBodyToNameInProducts                #RenameColumnToNewNameInTable"	
		
		# create a empty migration file 
		
			class AddNameToBrand < ActiveRecord::Migration[7.0]
			  def change
			  end
			end
			
step - 2) Rename column manually
 
		class RenameBodyToNameInProducts < ActiveRecord::Migration[7.0]
		  def change
			rename_column :products, :body, :name                           # Rename Column Manual
		  end
		end
		
step - 3) run migartion

		  syntax: rake db:migrate 
		  
		  -----------------------Output-------------------------------------------
		  
		== 20220122105344 RenameBodyToNameInProducts: migrating =======================
		-- rename_column(:products, :body, :name)
		   -> 0.0102s
		== 20220122105344 RenameBodyToNameInProducts: migrated (0.0105s) ==============



---------------------------------------Change Datatype for a column in Table-------------------------------------

step - 1) First generate migration

		syntax: rails generate migration ChangeDataTypeForNameInProducts              	
		
			
step - 2) Change Data Type                                      # 
 
		class ChangeDataTypeForNameInProducts < ActiveRecord::Migration[7.0]
		  def change
			change_column :products, :name, :string 
		  end
		end
		
step - 3) run migartion

		  syntax: rake db:migrate 
		  
Note that change_column command is irreversible.
		  

---------------------------------------Set a Not Null Column-------------------------------------

synatax:

		class ChangeColumnsToNotNullInProducts < ActiveRecord::Migration[7.0]
		  def change
			change_column_null :products, :category_id, false
			change_column_null :products, :category_name, false
			change_column_null :products, :brand_id, false
			change_column_null :products, :brand_name, false
		  end
		end
				  
-----------------------------------Add foreign key------------------------------------

syntax: add_foreign_key: table_name_1(add foreign key), table_name_2 (reference table) 

1) creating simple foreign key -- 

	add_foreign_key :articles, :authors
 
 [ ALTER TABLE "articles" ADD CONSTRAINT fk_rails_e74ce85cbc FOREIGN KEY ("author_id") REFERENCES "authors" ("id") ]

2) Creating a foreign key on a specific column -- 

	add_foreign_key :articles, :users, column: :author_id, primary_key: "lng_id"
	
 [ ALTER TABLE "articles" ADD CONSTRAINT fk_rails_58ca3d3a82 FOREIGN KEY ("author_id") REFERENCES "users" ("lng_id") ]

3) Creating a cascading foreign key -- 

	add_foreign_key :articles, :authors, on_delete: :cascade
	
  [ ALTER TABLE "articles" ADD CONSTRAINT fk_rails_e74ce85cbc FOREIGN KEY ("author_id") REFERENCES "authors" ("id") ON DELETE CASCADE ]
  
  
 Notes  - The options hash can include the following keys:

1) :column -- The foreign key column name on from_table. Defaults to to_table.singularize + "_id"

2) :primary_key -- The primary key column name on to_table. Defaults to id.

3) :name -- The constraint name. Defaults to fk_rails_<identifier>.

4) :on_delete -- Action that happens ON DELETE.
 
				Valid values are : nullify, 
								 :cascade 
								 :restrict

5) :on_update -- Action that happens ON UPDATE. 

				Valid values are : nullify, 
								 :cascade 
								 :restrict

6) :validate -- (Postgres only) Specify whether or not the constraint should be validated. Defaults to true.

7) :if_not_exists -- Specifies if the foreign key already exists to not try to re-add it. This will avoid duplicate column errors.

8) :deferrable -- (PostgreSQL only) Specify whether or not the foreign key should be deferrable. Valid values are booleans or :deferred 					or :immediate to specify the default behavior. Defaults to false.

---------------------------------------------------------
Default values

By default :on_update and :on_delete have :restrict value.

---------------------------------------------------------

e.g. ---- 
		class AddForeignKeysToProducts < ActiveRecord::Migration[7.0]
		  def change
			add_foreign_key :products, :categories, column: :category_id, primary_key: :id
			add_foreign_key :products, :brands, column: :brand_id, primary_key: :id
		  end
		end

-----------------------------------------Creating a Join Table---------------------------------------

1) syntax : create_join_table(table_1, table_2, column_options: {}, **options) 

You can pass an options hash which can include the following keys:

	1) :table_name - Sets the table name, overriding the default.
	2) :column_options - Any extra options you want appended to the columns definition.
	3) :options - Any extra options you want appended to the table definition.
    4) :temporary - Make a temporary table.
	5) :force - Set to true to drop the table before creating it. Defaults to false.


e.g. -   rails generate migration CreateJoinTableBrandCategories brands categories

		class CreateJoinTableBrandCategories < ActiveRecord::Migration[7.0]
		  def change
			create_join_table :brands, :categories do |t|
			  # t.index [:brand_id, :category_id]
			  # t.index [:category_id, :brand_id]
			end
		  end
		end
		
postgres syntax : CREATE TABLE brands_categories (
				  brand_id bigint NOT NULL,
				  caterory_id bigint NOT NULL,
				) ENGINE=InnoDB DEFAULT CHARSET=utf8

----------------------------Create Table using migration----------------------------------------

syntax: rails generate migration CreateCustomers name:string 

	class CreateCustomers < ActiveRecord::Migration[7.0]
	  def change
		create_table :customers do |t|
		  t.string :name

		  t.timestamps
		end
	  end
	end



---------------------------Change Table------------------------------------------------------------
syntax: change_table(table_name, **options)

class ChangeTableCustomers < ActiveRecord::Migration[7.0]
  def change
    change_table :customers do |t|
      t.string :gender, limit: 1                   # create new column
      t.date :date_of_birth
      t.string :city
      t.string :state
      t.string :country
      t.remove :description, :customer_name        # remove column
  	  t.index :part_number                         # create index
      t.rename :upccode, :upc_code				   # rename column					
    end
  end
end

------------------------Column Modifiers------------------------------------------------

1) limit - Sets the maximum number of characters for a string column and the maximum number of bytes for text/binary/integer columns.

2) null - Allows or disallows NULL values in the column.

3) precision - Specifies the precision for decimal/numeric/datetime/time columns

4) comment - Adds a comment for the column.

5)  scale - Specifies the scale for the decimal and numeric columns, representing the number of digits after the decimal point.

syntax : t.string :gender limit: 1
		 
		 
-----------------------------------References-------------------------------------------

The add_reference method allows the creation of an appropriately named column.




-----------------------------------------------CRUD--------------------------------------

-------------------------------------------create methods ------------------------------- 

1) create -- create will return the object and save it to the database.

----> brand = Brand.create(name: 'Redmi')

2) new --  The new method will return a new object without being saved to the database. 
		#  A call to user.save will commit the record to the database.
		
		brand = Brand.new(name: 'Dell')
 		=> #<Brand:0x00005607a8fee510 id: nil, name: "Dell", created_at: nil, updated_at: nil>  # Brand class object created
 		brand.save
 		

----------------------------------------Read methods ------------------------------------------------------

1 ) all -- return a collection with all
		3.0.0 :038 > brands = Brand.all                              # return a array 
		Brand Load (0.6ms)  SELECT "brands".* FROM "brands"
		=>                                                                   
		[#<Brand:0x00005607a91b7108                                           
		...     
			
		3.0.0 :045 > brands [0] 
		 => 
		#<Brand:0x00005607a91b7108                     
		 id: 1,                                        
		 name: "Lenovo",                               
		 created_at: Mon, 24 Jan 2022 10:47:51.428993000 UTC +00:00,
		 updated_at: Mon, 24 Jan 2022 10:47:51.428993000 UTC +00:00>  		
		
2) first --- return the first record

	3.0.0 :052 > brands = Brand.first
 	 Brand Load (1.1ms)  SELECT "brands".* FROM "brands" ORDER BY "brands"."id" ASC LIMIT $1 [["LIMIT",1]]  	                     			=>                                                                   
	#<Brand:0x00005607a9206bb8                                            
... 
         3.0.0 :053 > brands
		 => 
		#<Brand:0x00005607a9206bb8                                            
		 id: 1,                                                               
		 name: "Lenovo",                                                      
		 created_at: Mon, 24 Jan 2022 10:47:51.428993000 UTC +00:00,          
		 updated_at: Mon, 24 Jan 2022 10:47:51.428993000 UTC +00:00>   
		 
3) find_by -- return the first record filter by given argument (With find_by, a single record or nil)
	3.0.0 :057 > brand =Brand.find_by(name: 'HP')
	  Brand Load (0.5ms)  SELECT "brands".* FROM "brands" WHERE "brands"."name" = $1 LIMIT $2  [["name", "HP"], ["LIMIT", 1]]                                                  
	 =>                                                                 
	#<Brand:0x00005607a8bf8118  
	
	3.0.0 :058 > brand
	 => 
	#<Brand:0x00005607a8bf8118                                          
	 id: 3,                                                             
	 name: "HP",             
	 created_at: Mon, 24 Jan 2022 10:50:38.013064000 UTC +00:00,
	 updated_at: Mon, 24 Jan 2022 10:50:38.013064000 UTC +00:00>                                                        



4) where - where clause   (With where, an ActiveRecord::Relation object)
	
-->		brands = Brand.where(name: "Dell")
		Brand Load (0.5ms)  SELECT "brands".* FROM "brands" WHERE "brands"."name" = $1  [["name", "Dell"]]
		 =>                                                                   
		[#<Brand:0x00005607a8cd9230
		
-->		barnds
		  [#<Brand:0x00005607a8cd9230
		  id: 4,                 
		  name: "Dell",          
		  created_at: Mon, 24 Jan 2022 11:02:55.432574000 UTC +00:00,
		  updated_at: Mon, 24 Jan 2022 11:02:55.432574000 UTC +00:00>] 
		  
		  
e.g.2)     brands = Brand.where("id > 5")                                     # where condition where id > 5
  			Brand Load (0.6ms)  SELECT "brands".* FROM "brands" WHERE (id > 5)
 			=>                                                                   	
			[#<Brand:0x00007f06290b91f0 
			
output:  	3.0.0 :067 > brands
 => 
			[#<Brand:0x00007f06290b91f0                                           
			  id: 6,                                                              
			  name: "Godrej",                                                     
			  created_at: Mon, 24 Jan 2022 11:21:58.687546000 UTC +00:00,         
			  updated_at: Mon, 24 Jan 2022 11:21:58.687546000 UTC +00:00>,        
			 #<Brand:0x00007f06290b9100
			  id: 7,                 
			  name: "Usha",
			  created_at: Mon, 24 Jan 2022 11:22:38.901697000 UTC +00:00,
			  updated_at: Mon, 24 Jan 2022 11:22:38.901697000 UTC +00:00>] 
					
# If you’re expecting one record (a specific user), use find_by, for multiple records (a list of users) use where.

5) order - order by 

e.g. -- 3.0.0 :078 > brands = Brand.where('id > 5').order(created_at: :desc)
		  Brand Load (0.6ms)  SELECT "brands".* FROM "brands" WHERE (id > 5) ORDER BY "brands"."created_at" DESC    						=>                                                                                                    
		[#<Brand:0x00007f0629071508                    
		 
		 3.0.0 :079 > brands
		 => 
		[#<Brand:0x00007f0629071508                                                                            
		  id: 7,                                                                                               
		  name: "Usha",                                                                                        
		  created_at: Mon, 24 Jan 2022 11:22:38.901697000 UTC +00:00,                                          
		  updated_at: Mon, 24 Jan 2022 11:22:38.901697000 UTC +00:00>,
		 #<Brand:0x00007f0629071440
		  id: 6,                 
		  name: "Godrej",
		  created_at: Mon, 24 Jan 2022 11:21:58.687546000 UTC +00:00,
		  updated_at: Mon, 24 Jan 2022 11:21:58.687546000 UTC +00:00>] 
		  
-------------------------------------Update Methods -------------------------------------------------------

1) update - 
e.g.    --> brand = Brand.find_by(name: 'Wipro')
		-->	brand.name = 'wipro'
 		-->	=> "wipro" 
 		-->	brand.save

e.g. 2 ) brand = Brand.where(name: 'wipro')
		 brand.update(name: 'Wipro')
		 
		  TRANSACTION (0.3ms)  BEGIN
		  Brand Update (0.6ms)  UPDATE "brands" SET "name" = $1, "updated_at" = $2 WHERE "brands"."id" = $3  [["name", "Wipro"], ["updated_at", "2022-01-24 12:16:35.782768"], ["id", 5]]          
		  TRANSACTION (22.9ms)  COMMIT                                       
		 =>                                                                  
		[#<Brand:0x0000563d5850cf80                                          
		  id: 5,                                                             
		  name: "Wipro",                                     
		  created_at: Mon, 24 Jan 2022 11:20:02.090315000 UTC +00:00,
		  updated_at: Mon, 24 Jan 2022 12:16:35.782768000 UTC +00:00>]	
	
2) update_all -    (This is class method)

			#User.update_all 

		brands = Brand.update_all(name: 'Lenovo')
		  Brand Update All (15.8ms)  UPDATE "brands" SET "name" = $1  [["name", "Lenovo"]]
		 => 7                                                                                                 
		3.0.0 :012 > brands
		 => 7 
		3.0.0 :013 > brands.class
		 => Integer 

Brand.update(:all, name: 'HP')   # :work with class only # return all record with update value 'HP'


----------------------------------------------Delete/ Destroy ----------------------------------------------

1) destroy- 
		brand = Brand.find_by(name: 'HP')
		  Brand Load (0.4ms)  SELECT "brands".* FROM "brands" WHERE "brands"."name" = $1 LIMIT $2  [["name", "HP"], ["LIMIT", 1]]                                                                  
		 =>                                                                  
		#<Brand:0x0000563d587ff710                                           
		...                                                                  
		3.0.0 :026 > brand.destroy
		  TRANSACTION (0.4ms)  BEGIN
		  Brand Destroy (1.3ms)  DELETE FROM "brands" WHERE "brands"."id" = $1  [["id", 1]]
		  TRANSACTION (23.1ms)  COMMIT                                       
		 =>                                                                  
		#<Brand:0x0000563d587ff710                                           
		 id: 1,                                                              
		 name: "HP",                                                         
		 created_at: Mon, 24 Jan 2022 10:47:51.428993000 UTC +00:00,         
		 updated_at: Mon, 24 Jan 2022 12:26:21.999432000 UTC +00:00> 



2) destroy_by -   Class method

	brands = Brand.destroy_by(name: 'HP')

	
	
	
3) .0.0 :027 > destroy_all -  Class method to delete all records

 barnds = Brand.destroy_all
 ----------Output: -------
  Brand Load (0.5ms)  SELECT "brands".* FROM "brands"
  TRANSACTION (0.3ms)  BEGIN                                          
  Brand Destroy (0.9ms)  DELETE FROM "brands" WHERE "brands"."id" = $1  [["id", 2]]
  TRANSACTION (21.2ms)  COMMIT                                        
  TRANSACTION (0.3ms)  BEGIN                                          
  Brand Destroy (0.7ms)  DELETE FROM "brands" WHERE "brands"."id" = $1  [["id", 3]]
  TRANSACTION (4.8ms)  COMMIT                                         
  TRANSACTION (0.3ms)  BEGIN                                          
  Brand Destroy (0.7ms)  DELETE FROM "brands" WHERE "brands"."id" = $1  [["id", 4]]
  TRANSACTION (5.9ms)  COMMIT                                         
  TRANSACTION (0.3ms)  BEGIN                                          
  Brand Destroy (0.8ms)  DELETE FROM "brands" WHERE "brands"."id" = $1  [["id", 6]]
  TRANSACTION (4.9ms)  COMMIT                                         
  TRANSACTION (0.3ms)  BEGIN                                          
  Brand Destroy (0.8ms)  DELETE FROM "brands" WHERE "brands"."id" = $1  [["id", 7]]
  TRANSACTION (5.9ms)  COMMIT
  TRANSACTION (0.3ms)  BEGIN
  Brand Destroy (0.6ms)  DELETE FROM "brands" WHERE "brands"."id" = $1  [["id", 5]]
  TRANSACTION (5.8ms)  COMMIT










	
