--------------------------------------------------------Array------------------------------
 --> An array is a collection of different or similar items, stored at contiguous memory locations. They can hold objects like integer, number, hash, string, symbol or any other array. 
 
--> indexing - start from 0 & The negative index starts with -1 from the end of the array


1) Creating Arrays-
		Mostly common used methods-
		
	    i) Using literal constructor []
	    
	    	3.0.0 :007 > a=['a','b',52,65]
			 => ["a", "b", 52, 65] 
			3.0.0 :008 > a
			 => ["a", "b", 52, 65] 
			3.0.0 :009 > a.class
			 => Array 
			 
			 3.0.0 :021 > arr4=Array("a".."z")
			 3.0.0 :022 > arr4
			 => ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", 					 "y", "z"] 

	    
	   ii) Using new class method
	   
	 		3.0.0 :010 > arr=Array.new
 			=> [] 
 			arr=Array.new()
			 => [] 

			3.0.0 :014 > arr1=Array.new(7)
 			=> [nil, nil, nil, nil, nil, nil, nil] 
 			
 			3.0.0 :015 > arr2=Array.new(4,'abc')
 			=> ["abc", "abc", "abc", "abc"] 
 			
 			3.0.0 :051 > even=Array.new(5) {|e| e=e*2}
			 => [0, 2, 4, 6, 8] 


 2) Accessing Elements -->
 
 			3.0.0 :045 > arr1
 			=> [5, 4, 3, "a"] 
 			
 			3.0.0 :036 > arr1[0]
			 => 5 
			3.0.0 :037 > arr1[1]
			 => 4 
			3.0.0 :038 > arr1[3]
			 => "a" 
			3.0.0 :039 > arr1[4]
			 => nil 
			3.0.0 :040 > arr1[-1]
			 => "a" 
			3.0.0 :041 > arr1[-2]
			 => 3 
			3.0.0 :042 > arr1[-5]
			 => nil 

 			3.0.0 :043 > arr1[2,3]              # 2 is start index & 3 is length
			 => [3, "a"] 
			3.0.0 :044 > arr1[1,3]
			 => [4, 3, "a"] 
						
 		    3.0.0 :053 > even[0..3]
 			=> [0, 2, 4, 6] 

 			3.0.0 :057 > even.at(0)
			 => 0 
			3.0.0 :058 > even.at(1)
			 => 2 
			3.0.0 :059 > even.at(3)
			 => 6 

 -------------------------------------------------Methods for Creating an Array-------------------------------------------------
 
 1) [](*args) - Returns a new array populated with the given objects.
 	
 		3.0.0 :061 > arr=Array.[](1,'a','A')
 		=> [1, "a", "A"] 
 		
 2)  new → new_empty_array
	new(array) → new_array
	new(size) → new_array
	new(size, default_value) → new_array
	new(size) {|index| ... } → new_array -   Returns a new Array
	

3) try_convert(object) → object, new_array, or nil - If object is an Array object, returns object

	
	
----------------------------------------------------Methods for Querying-----------------------------------------------------------
1)  length → an_integer - Returns the count of elements in self.
		
			3.0.0 :077 > a
			 => [5, 4] 
			3.0.0 :078 > a.length
			 => 2 
2) size - Alias of length  
		3.0.0 :079 > a.size
 		=> 2 
 		
3)  include?(obj) → true or false -- Returns true if for some index i in self, obj == self[i]; otherwise false:


		3.0.0 :090 > a=Array(0..5)
		 => [0, 1, 2, 3, 4, 5] 
		3.0.0 :091 > a.include?(5)
		 => true 
		3.0.0 :092 > a.include?(6)
		 => false 
		 
4)  empty? → true or false --Returns true if the count of elements in self is zero, false otherwise.

		3.0.0 :093 > a.empty?
		 => false 
		3.0.0 :094 > b=Array.new
		 => [] 
		3.0.0 :095 > b.empty?
		 => true 
5)  all? → true or false 
	all? {|element| ... } → true or false
	all?(obj) → true or false-----Returns true if all elements of self meet a given criterion.

	3.0.0 :098 > a
	 => [0, 1, 2, 3, 4, 5] 
	3.0.0 :099 > a.all?
	 => true 
	3.0.0 :100 > b
	 => [] 
	3.0.0 :101 > b.all?
	 => true 
	 3.0.0 :106 > c
	 => ["a", nil] 
	3.0.0 :107 > c.all?
	 => false 
	3.0.0 :108 > [0, 1, 2].all? { |element| element < 3 }
	 => true 
	3.0.0 :109 > [0, 1, 2].all? { |element| element < 2 }
	 => false 
	 3.0.0 :114 > d=['ab','abc','abcd']
	 => ["ab", "abc", "abcd"] 
	3.0.0 :115 > d.all?(/ab/)
	 => true 
	3.0.0 :116 > d.all?(/abc/)
	 => false 

6)  any? → true or false 
	any? {|element| ... } → true or false
	any?(obj) → true or false--- Returns true if any element of self meets a given criterion.
	
	----> With no block given and no argument, returns true if self has any truthy element, false otherwise:
	
	3.0.0 :126 > a
	 => [0, 1, 2, 3, 4, 5] 
	3.0.0 :127 > a.any?
	 => true 
	3.0.0 :128 > b
	 => [] 
	3.0.0 :129 > b.any?
	 => false 
	3.0.0 :130 > c
	 => ["a", nil] 
	3.0.0 :131 > c.any?
	 => true 
	 

7)  none- is a Array class method which checks whether the array is empty or not.
	none? → true or false 
	none? {|element| ... } → true or false
	none?(obj) → true or false

	Returns true if no element of self meet a given criterion.

	With no block given and no argument, returns true if self has no truthy elements, false otherwise: 
	
	3.0.0 :141 > [nil].none?
	 => true 
	3.0.0 :142 > [false].none?
	 => true 
	3.0.0 :143 > [].none?
	 => true 
	3.0.0 :144 > [1].none?
	 => false 
	3.0.0 :146 > [0,1,2].none? {|element| element>3}
	 => true 
	 3.0.0 :146 > [0,1,2].none? {|element| element>3}
	 => true 
	3.0.0 :147 > [0,1,2].none? {|element| element>2}
	 => true 
	3.0.0 :148 > [0,1,2].none? {|element| element>1}
	 => false 
	 3.0.0 :149 > [0,1,2].none?(3)
 	=> true 
	3.0.0 :150 > [0,1,2].none?(2)
 	=> false 
 	
 8) one? - Array class method which checks whether the array is having only one array element
 
 	 one? → true or false 
	one? {|element| ... } → true or false
	one?(obj) → true or false 
	
	Returns true if exactly one element of self meets a given criterion.
	With no block given and no argument, returns true if self has exactly one truthy element, false otherwise:
	
	
	3.0.0 :156 > c                            # nil don't consider as a element
	 => ["a", nil] 
	3.0.0 :157 > c.one?
 	=> true 
	3.0.0 :159 > [0,1,2].one? {|element| element>2}
	 => false 
	3.0.0 :160 > [0,1,2].one? {|element| element>1}
	 => true 
	3.0.0 :161 > [false].one?
	 => false 
	3.0.0 :162 > [nil,0].one?
	 => true 
	3.0.0 :163 > [0,0].one?
	 => false 
	3.0.0 :164 > [nil,nil].one?                   
	 => false 
	3.0.0 :165 > [].one?
	 => false 
	3.0.0 :166 > [0,1,2].one?(0)
	 => true 
	3.0.0 :167 > [0,1,2].one?(1)
	 => true 
	3.0.0 :168 > [0,1,2].one?(2)
	 => true 
	3.0.0 :169 > [0,1,2,2].one?(2)
	 => false 
	3.0.0 :170 > [0,1,2,2].one?(3)
	 => false 
	
9) count - count() is a Array class method which returns the number of elements in the array. It can also find the total number of a 			   particular element in the array.	

 	count → an_integer 
	count(obj) → an_integer
	count {|element| ... } → an_integer 
	
	3.0.0 :171 > [0,1,2,4].count
	 => 4 
	3.0.0 :172 > [].count
	 => 0 
	3.0.0 :173 > [0,1,2,2].count(2)
	 => 2 
	3.0.0 :174 > [0,1,2,3].count {|element| element>3}
	 => 0 
	3.0.0 :175 > [0,1,2,3].count {|element| element>1}
	 => 2 

10) index() or find_index() is an Array class method which returns the index of the first object in the array.

	 index(object) → integer or nil click to toggle source
	index {|element| ... } → integer or nil
	index → new_enumerator 		
	
	3.0.0 :176 > [0,1,2,4].index(5)
	 => nil 
	3.0.0 :177 > [0,1,2,4].index(4)
	 => 3 
	3.0.0 :178 > [0,1,2,3].index {|element| element == 3}
	 => 3 
	3.0.0 :179 > [0,1,2,3].index {|element| element == 2}
	 => 2 

	3.0.0 :181 > a=[0,1,2].index
	 => #<Enumerator: [0, 1, 2]:index> 
	3.0.0 :182 > a.each {|element| element == 3 }
	 => nil 
	3.0.0 :183 > a.each {|element| element == 2 }
	 => 2 
	3.0.0 :184 > 
	
11) rindex() is a Array class method which returns the index of the last object in the array.
	rindex(object) → integer or nil
	rindex {|element| ... } → integer or nil
	rindex → new_enumerator 
	
	3.0.0 :187 > [0,1,0,1,2].rindex(0)
	 => 2 
	3.0.0 :188 > [0,1,0,1,2].rindex(1)
	 => 3 

	3.0.0 :189 > [0,1,0,1,2].rindex {|element| element==0}
 	=> 2 
	3.0.0 :190 > [0,1,0,1,2].rindex {|element| element==1}
 	=> 3 
	3.0.0 :193 > a.each {|element| element==1}
 	=> 3 
	3.0.0 :194 > a.each {|element| element==0}
	 => 2 
12) hash() is an Array class method which returns the hash code of the array elements--

	hash → integer
	
	3.0.0 :195 > [0,1,2].hash
	 => -2602957621024856705  
	 
-----------------------------------------------------------Methods for Comparing--------------------------------------
1)array <=> other_array → -1, 0, or 1 (check each elements)   (<=> - comparison operator)

	Returns -1, 0, or 1 as self is less than, equal to, or greater than other_array. For each index i in self, evaluates result = self[i] 		<=> other_array[i].

	Returns -1 if any result is -1:
	a <=> b :=
   if a < b then return -1
   if a = b then return  0
   if a > b then return  1
   if a and b are not comparable then return nil
  
  
  3.0.0 :206 > [0,1,2]<=>[0,1,2]    # compare elements one by one 0=0, 1=1, 2=2   result = 0
  => 0 
  3.0.0 :207 > [0,1,3]<=>[0,1,2]    # 0=0, 1=1, 3>2 means a>b so result = 1
  => 1 
  3.0.0 :208 > [0,1,3]<=>[0,1,4]    # 0=0, 1=1, 3<4 means a<b so result = -1
  => -1 
  3.0.0 :209 > [0,1,2]<=>[0,2,1]    # 0=0, 1<2 means a<b  so return -1
  => -1 
  
2) array == other_array → true or false 

	Returns true if both array.size == other_array.size and for each index i in array, array[i] == other_array[i]
	
	3.0.0 :215 > [0,1,2]==[0,1.0,2.0]   # each elements and size equal   in ruby 2 and 2.0 are equal
 	=> true 
    3.0.0 :216 > [0]==[1]
 	=> false 
3) eql?() is a Array class method which checks if the two arrays are equal or not. 
	
	3.0.0 :219 > [0,1,2].eql?([0,1,2])     # true if elements and size are equal. 
    => true 

 -----------------------------------------------------Methods for Fetching-------------------------------------------
1)  array[index] → object or nil
	array[start, length] → object or nil
	array[range] → object or nil
	array[aseq] → object or nil    # aseq = Enumerator::ArithmeticSequence
	 
 
 	3.0.0 :220 > a=[1,2,'a',3,'d']
	 => [1, 2, "a", 3, "d"] 
	3.0.0 :221 > a[(1..).step(2)]
	 => [2, 3] 
	3.0.0 :222 > a[(0..).step(2)]
	 => [1, "a", "d"] 
	3.0.0 :223 > a[(0..).step(2)]

2) fetch() is a Array class method which returns the element at the argument index position. 
	
	fetch(index) → element 
	fetch(index, default_value) → element    # return index element if index in range else return default value
	fetch(index) {|index| ... } → element   
 
 	3.0.0 :225 > a
	 => [1, 2, "a", 3, "d"] 
	3.0.0 :226 > a.fetch(2)
	 => "a" 
	3.0.0 :227 > a.fetch(5,'k')
	 => "k" 
	3.0.0 :228 > a
	 => [1, 2, "a", 3, "d"] 
	3.0.0 :229 > a.fetch(2,'k')
	 => "a"
	 3.0.0 :007 > a.fetch(2) {|element| "Out of index"}
	 => "b" 
	3.0.0 :008 > a.fetch(5) {|element| "Out of index"}
	 => "Out of index" 

 
3) first() is a Array class method which returns the first element of the array or the first ‘n’ elements from the array.
   
    first → object or nil 
	first(n) → new_array

	Returns elements from self; does not modify self. When no argument is given, returns the first element: 
 	3.0.0 :009 > a
	 => ["a", 1, "b", 3] 
	3.0.0 :010 > a.first
	 => "a" 
	3.0.0 :011 > a.first(3)
	 => ["a", 1, "b"] 
	3.0.0 :012 > a.first(6)
	 => ["a", 1, "b", 3] 
	3.0.0 :013 > a.first(0)
	 => [] 
 
 4) last() is a Array class method which returns the last element of the array or the last ‘n’ elements from the array. The first form returns nil, If the array is empty .
 
    last → object or nil 
	last(n) → new_array

	Returns elements from self; self is not modified. When no argument is given, returns the last element:
	
	3.0.0 :014 > a
	 => ["a", 1, "b", 3] 
	3.0.0 :015 > a.last
	 => 3 
	3.0.0 :016 > a.last(2)
	 => ["b", 3] 
	3.0.0 :017 > a.last(6)
	 => ["a", 1, "b", 3] 
	3.0.0 :018 > a.last(0)
	 => [] 

5) max() is a Array class method which returns the maximum value in this array. ( Only perform Numeric values)

	max → element
		3.0.0 :002 > a.max
 		=> "e" 
 		
	max {|a, b| ... } → element               
	3.0.0 :012 > a=['a',5]
	 => ["a", 5] 
	3.0.0 :013 > a.max {|a,b| a.size<=>b.size}              #compare bytes occupied by each element
 	=> 5 

	
	max(n) → new_array
		3.0.0 :003 > a.max(2)
 		=> ["e", "d"] 
	
	max(n) {|a, b| ... } → new_array 
	3.0.0 :014 > a=['a',5,'c',10]
	 => ["a", 5, "c", 10] 
	3.0.0 :015 > a.max(2) {|a,b| a.size<=>b.size}
	 => [10, 5] 

6)  min() is a Array class method which returns the minimum value in this array.

	3.0.0 :019 > a=[1,5,4,9,8]
 => [1, 5, 4, 9, 8] 
 
	 min → element 
	3.0.0 :020 > a.min
	 => 1 

	min(n) → new_array
	3.0.0 :021 > a.min(3)
	 => [1, 4, 5]

	3.0.0 :022 > a=['a',1,'b',10]
	 => ["a", 1, "b", 10]
 
 	min { |a, b| ... } → element
 	3.0.0 :023 > a.min {|a,b| a.size<=>b.size}
 	=> "a" 

	min(n) { |a, b| ... } → new_array
	3.0.0 :024 > a.min(2) {|a,b| a.size<=>b.size}
	 => ["a", "b"] 
 

7) The minmax() - returns an array containing two elements. It contains the minimum and the maximum value in the array.

-->	 minmax → [min_val, max_val]
	3.0.0 :028 > a
 	=> [1, 4, 3, 2, 5, 9]
 	3.0.0 :029 > a.minmax
	=> [1, 9] 
	
-->	 minmax {|a, b| ... } → [min_val, max_val]
	3.0.0 :037 > a
	 => ["a", "b", 5, 6, 7] 
	3.0.0 :038 > a.minmax {|a,b| a.size<=>b.size}
 	=> ["a", 5] 
 	
 8) The assoc() function in Ruby is used to search through an array of arrays whose first element is compared with the parameter of the 				function and return the contained array if match found otherwise return either nil or vacant.
 
     Syntax: Array.assoc(Object)
    Here Array is the array of arrays.

    Parameters:
    Object : It is an element which gets compared with the first element of the contained array.

    Returns: the contained array if match found otherwise returns either nil or vacant.	
    
    3.0.0 :040 > a=[[1,2,3],[5,6,7],[8,9,10]]
	 => [[1, 2, 3], [5, 6, 7], [8, 9, 10]] 
	3.0.0 :041 > a.assoc(5)
	 => [5, 6, 7] 
	3.0.0 :042 > a.assoc(8)
	 => [8, 9, 10] 
	3.0.0 :043 > a.assoc(9)
	 => nil
    
9) rassoc(obj) → found_array or nil 

	Syntax: Array.rassoc(Object)
    Here Array is the array of arrays.

    Parameters:
    Object : It is an element which gets compared with the second element of the contained array.

    Returns: the contained array if match found otherwise returns either nil or vacant.	
  
  	3.0.0 :047 > a
	 => [[1, 2, 3], [5, 6, 7], [8, 9, 10]] 
	3.0.0 :048 > a.rassoc(1)
	 => nil 
	3.0.0 :049 > a.rassoc(2)
	 => [1, 2, 3] 
	3.0.0 :050 > a.rassoc(6)
	 => [5, 6, 7] 
	3.0.0 :051 > a.rassoc(9)
	 => [8, 9, 10] 
	3.0.0 :052 > a.rassoc(10)
	 => nil 
	 
10) at()- is an Array class method which returns the element at the specific argumented index value. 

 	Syntax:  Array.at()

	Parameter: 
		- index to search

	Return:  Array element at a specific index value
	
	3.0.0 :060 > a
	 => [[1, 2, 3], [5, 6, 7], [8, 9, 10]] 
	3.0.0 :061 > a.at(0)
	 => [1, 2, 3] 
	3.0.0 :062 > a.at(1)
	 => [5, 6, 7] 
	3.0.0 :063 > a.at(2)
	 => [8, 9, 10] 

11) values_at() is a Array class method which returns an array containing the elements in self corresponding to the given selector. (index)

--> values_at(*indexes) → new_array

	i) For each positive index, returns the element at offset index:
		3.0.0 :066 > a
 		=> [[1, 2, 3], [5, 6, 7], [8, 9, 10]] 
		3.0.0 :067 > a.values_at(1,2)
		 => [[5, 6, 7], [8, 9, 10]] 
		3.0.0 :068 > a.values_at(0..1)
		 => [[1, 2, 3], [5, 6, 7]] 
		 
   ii) The given indexes may be in any order, and may repeat:
   		3.0.0 :071 > a
 		=> [[1, 2, 3], [5, 6, 7], [8, 9, 10]] 
		3.0.0 :072 > a.values_at(1,2,1)
		 => [[5, 6, 7], [8, 9, 10], [5, 6, 7]] 
		3.0.0 :073 > a.values_at(1,1..2)
		 => [[5, 6, 7], [5, 6, 7], [8, 9, 10]] 
		 
   iii) Assigns nil for an index that is too large or too small: 
   		3.0.0 :075 > a.values_at(1,2,3)
		 => [[5, 6, 7], [8, 9, 10], nil] 
		 
		 3.0.0 :077 > a.values_at(1,-5)
 		 => [[5, 6, 7], nil] 
		 
	iv) Returns a new empty Array if no arguments given 
		3.0.0 :076 > a.values_at
		 => [] 

12) dig() is a Array class method which extracts the specific element out of the high dimension sequences. (nested array elements)
--> dig(index, *identifiers) → object                                   (equal to python nested list[0][1])
	
	3.0.0 :078 > a
	 => [[1, 2, 3], [5, 6, 7], [8, 9, 10]] 
	3.0.0 :079 > a.dig(0,2)                       
	 => 3 
	3.0.0 :080 > a.dig(1,2)
 	=> 7 

13) drop() is a Array class method which drops first ‘n’ elements from the array and returns the remaining elements (does not modify self)
--> drop(n) → new_array  # 'n' - no. of elements to drop.

	3.0.0 :081 > a
	 => [[1, 2, 3], [5, 6, 7], [8, 9, 10]] 
	3.0.0 :082 > a.drop(2)                      # drop first two elements
	 => [[8, 9, 10]] 
	3.0.0 :083 > a.drop(1)
	 => [[5, 6, 7], [8, 9, 10]] 			   # drop first element	
	3.0.0 :084 > a                           # does not modify self
	 => [[1, 2, 3], [5, 6, 7], [8, 9, 10]] 

14) take() is a Array class method which returns the number of elements in the array. (does not modify self)
--> take(n) → new_array # 

	3.0.0 :085 > a                                   # does not modify self
	 => [[1, 2, 3], [5, 6, 7], [8, 9, 10]] 
	3.0.0 :086 > a.take(3)
	 => [[1, 2, 3], [5, 6, 7], [8, 9, 10]] 
	3.0.0 :087 > a.take(2)
	 => [[1, 2, 3], [5, 6, 7]] 
	3.0.0 :088 > a.take(1)
	 => [[1, 2, 3]] 
	3.0.0 :089 > a.take(0)
	 => [] 

15) The drop_while()- returns an array containing the rest elements after dropping elements upto, but not including, the first element 						  for which the block returns nil or false. In case no block is given it returns the enumerator instead.

-->  drop_while {|element| ... } → new_array
		3.0.0 :103 > a
		 => [[1, 2, 3, 3], [5, 6, 7, 3], [8, 9, 10, 3]] 
		3.0.0 :104 > a.at(0)
		 => [1, 2, 3, 3] 
		3.0.0 :105 > a.at(0).drop_while {|element| element<3}
		 => [3, 3] 
		3.0.0 :106 > a.at(0).drop_while {|element| element<2}
		 => [2, 3, 3] 
		3.0.0 :107 > 

-->  drop_while → new_enumerator 
	3.0.0 :107 > a.drop_while
 	=> #<Enumerator: [[1, 2, 3, 3], [5, 6, 7, 3], [8, 9, 10, 3]]:drop_while> 
	
16) take_while() is a Array class method which returns elements to the block until the block returns nil or false. (does not modify self.)

-->  take_while {|element| ... } → new_array 
	3.0.0 :111 > a
	 => [[1, 2, 3, 3], [5, 6, 7, 3], [8, 9, 10, 3]] 
	3.0.0 :112 > a.at(0).take_while {|element| element<3}
	 => [1, 2] 

-->  take_while → new_enumerator 
     3.0.0 :113 > a.take_while
 	=> #<Enumerator: [[1, 2, 3, 3], [5, 6, 7, 3], [8, 9, 10, 3]]:take_while> 
 	
17) slice() is a Array class method which returns a subarray specified by range of indices. 
-->   slice(index) → object or nil
	  3.0.0 :114 > a
	  => [[1, 2, 3, 3], [5, 6, 7, 3], [8, 9, 10, 3]] 
	  3.0.0 :115 > a.slice(2)								# 2 is index no.
	  => [8, 9, 10, 3] 

	slice(start, length) → object or nil
	3.0.0 :117 > a.slice(1,2)
	 => [[5, 6, 7, 3], [8, 9, 10, 3]] 

	slice(range) → object or nil
	3.0.0 :118 > a.slice(1...2)
 	=> [[5, 6, 7, 3]] 

18) sort() is a Array class method which returns a new array created by sorting self 
-->   sort → new_array 
	3.0.0 :132 > a=[5,4,8,7,9]
	 => [5, 4, 8, 7, 9] 
	3.0.0 :133 > a.sort
	 => [4, 5, 7, 8, 9] 
	3.0.0 :134 > a                   # does not modify self
	 => [5, 4, 8, 7, 9] 
       
-->  sort {|a, b| ... } → new_array 
		#reverse sort array
	3.0.0 :135 > a
	 => [5, 4, 8, 7, 9] 
	3.0.0 :136 > a.sort {|a,b| b<=>a}
	 => [9, 8, 7, 5, 4] 
			
19)reverse() is a Array class method which returns a new array containing self’s elements in reverse order.
-->  reverse → new_array

	3.0.0 :139 > a=[1,5,3,8]
	 => [1, 5, 3, 8] 
	3.0.0 :140 > a.reverse
	 => [8, 3, 5, 1] 
	3.0.0 :141 > a                           # does not modify self
	 => [1, 5, 3, 8] 
	
20) compact () is a Array class method which returns the array after removing all the ‘nil’ value elements (if any) from the array
--> compact → new_array 

	3.0.0 :142 > a = [nil, 0, nil, 1, nil, 2, nil]
	 => [nil, 0, nil, 1, nil, 2, nil] 
	3.0.0 :143 > a.compact
	 => [0, 1, 2] 
	 
21) select() or filter() is a Array class method which returns a new array containing all elements of array for which the given block returns a true value
-->   select {|element| ... } → new_array
	3.0.0 :145 > a=[5,7,6,3,9,5]              # does not modify self
	 => [5, 7, 6, 3, 9, 5] 
	3.0.0 :146 > a.select {|element| element>6}
	 => [7, 9] 

-->   select → new_enumerator 
	3.0.0 :147 > a.select
 	=> #<Enumerator: [5, 7, 6, 3, 9, 5]:select> 

--> filter()

	3.0.0 :148 > a
	 => [5, 7, 6, 3, 9, 5] 
	3.0.0 :149 > a.filter {|element| element>5}
	 => [7, 6, 9] 

22) uniq() is a Array class method which returns a new array by removing duplicate values in the array.	
-->  uniq → new_array
	3.0.0 :150 > a=['a','b',1,2,1,2,'a']
	 => ["a", "b", 1, 2, 1, 2, "a"] 
	3.0.0 :151 > a.uniq
	 => ["a", "b", 1, 2] 

-->	 uniq {|element| ... } → new_array 
	3.0.0 :152 > a.uniq {|element| element.size}
	 => ["a", 1] 
	
23) rotate() is a Array class method which returns a new array by rotating self so that the element at count is the first element of the 				new array.
-->  rotate → new_array             # first element has been rotated to the last position
	3.0.0 :156 > a
	 => ["a", "b", 1, 2, 1, 2, "a"] 
	3.0.0 :157 > a.rotate
	 => ["b", 1, 2, 1, 2, "a", "a"] 
	3.0.0 :158 > a.rotate.rotate
	 => [1, 2, 1, 2, "a", "a", "b"] 
	3.0.0 :159 > a.rotate.rotate.rotate
	 => [2, 1, 2, "a", "a", "b", 1] 
	
-->  rotate(count) → new_array   # returns a new Array with count elements(from first) rotated from the beginning to the end:
	3.0.0 :160 > a
	 => ["a", "b", 1, 2, 1, 2, "a"] 
	3.0.0 :161 > a.rotate(3)                 # first 3 elements has been rotated to the last position
 	=> [2, 1, 2, "a", "a", "b", 1] 

24)  bsearch() is an Array class method which finds a value from the array that meets with the given condition. It’s complexity is O(log 					n) where n is the array size. This method can work in both the modes – find-minimum and find-any mode.

-->  bsearch {|element| ... } → object
	3.0.0 :171 > a
	 => [5, 9, 6, 4, 4] 
	3.0.0 :174 > a.bsearch{|element| element<7}  # return first element which meet condition
	 => 6 

-->  bsearch → new_enumerator 
	3.0.0 :175 > a.bsearch
	 => #<Enumerator: [5, 9, 6, 4, 4]:bsearch> 

25) bsearch_index() is an Array class method which finds the index of the array value that meets with the given condition. Its complexity is O(log n) where n is the array size. This method can work in both the modes – find-minimum and find-any mode.

-->  bsearch_index {|element| ... } → integer
	3.0.0 :193 > a
	 => [5, 9, 6, 4, 4] 
	3.0.0 :194 > a.bsearch_index {|element| element>=4}
	 => 0 
	3.0.0 :195 > a.bsearch_index {|element| element>4}
	 => 0 
	3.0.0 :196 > a.bsearch_index {|element| element>5}
	 => 1 
 
-->  bsearch_index → new_enumerator 
 	3.0.0 :197 > a.bsearch_index
 	=> #<Enumerator: [5, 9, 6, 4, 4]:bsearch_index> 
 	
26) sample() is a Array class method which returns a random element or n random elements from the array.
--> sample(random: Random) → object
	3.0.0 :199 > a.sample
	 => 4 
--> sample(n, random: Random) → new_ary 
	3.0.0 :200 > a.sample(5)
 	=> [9, 6, 4, 5, 4] 
	3.0.0 :201 > a.sample(4)
	 => [4, 4, 5, 9] 
	 
27) shuffle() is a Array class method which returns a new array with elements of self shuffle.

--> shuffle[random: Random] → new_ary
	3.0.0 :206 > a
	 => [5, 9, 6, 4, 4] 
	3.0.0 :207 > a.shuffle
	 => [9, 4, 6, 4, 5] 

-------------------------------------------------------Methods for Assigning---------------------------------------------------------
Note --- These methods add, replace, or reorder elements in self.

1)  array[index] = object → object  (Return given object and modify self)
	3.0.0 :210 > a
	 => [5, 9, 6, 4, 4] 
	3.0.0 :211 > a[2]=20
	 => 20 
	3.0.0 :212 > a
	 => [5, 9, 20, 4, 4] 

-->	array[start, length] = object → object
	3.0.0 :213 > a
	 => [5, 9, 20, 4, 4] 
	3.0.0 :214 > a[2,2]=[20,10]
	 => [20, 10] 
	3.0.0 :215 > a
	 => [5, 9, 20, 10, 4] 
	
-->	array[range] = object → object
 	 3.0.0 :217 > a
	 => [5, 9, 20, 10, 4] 
	3.0.0 :218 > a[1..3]=[5]
 	=> [5] 
	3.0.0 :219 > a
	 => [5, 5, 4] 

2) The push() function in Ruby is used to push the given element at the end of the given array and returns the array itself with the pushed elements.
--> push(*objects) → self   (return self array)
	3.0.0 :220 > a
	 => [5, 5, 4] 
	3.0.0 :221 > a.push(5,20)
	 => [5, 5, 4, 5, 20] 

2) append() is an Array class method which add elements at the end of the array. (same as push)
--> append(*args) - return self
	3.0.0 :223 > a.append(2,5)
 	=> [5, 5, 4, 5, 20, 2, 5] 
	3.0.0 :224 > a.append([10,15])
 	=> [5, 5, 4, 5, 20, 2, 5, [10, 15]] 

3) array << object → self 
	3.0.0 :228 > a<<1000
	 => [5, 5, 4, 5, 20, 2, 5, [10, 15], 1000] 
	3.0.0 :229 > a<<[2,63]
	 => [5, 5, 4, 5, 20, 2, 5, [10, 15], 1000, [2, 63]] 
	3.0.0 :230 > a<<'a'
 	=> [5, 5, 4, 5, 20, 2, 5, [10, 15], 1000, [2, 63], "a"] 
	3.0.0 :231 > a
 	=> [5, 5, 4, 5, 20, 2, 5, [10, 15], 1000, [2, 63], "a"] 
 
4) unshift() is a Array class method which returns the shifted array with argumented element in place.

--> unshift(*objects) → self    # insert object at first position
	3.0.0 :232 > a=[5,4,8,6]
	 => [5, 4, 8, 6] 
	3.0.0 :233 > a.unshift(2)
	 => [2, 5, 4, 8, 6] 
	3.0.0 :234?> a.unshift([2,8])
	 => [[2, 8], 2, 5, 4, 8, 6] 

5) prepend(*args) - alias of unshift
	3.0.0 :235 > a
 	=> [[2, 8], 2, 5, 4, 8, 6] 
	3.0.0 :236 > a.prepend(5,10)
 	=> [5, 10, [2, 8], 2, 5, 4, 8, 6] 
 	
6) insert() is a Array class method which returns the array by inserting a given element at the specified index value. 

--> insert(index, *objects) → self 
	3.0.0 :238 > a=[1,3,5,7,11,13]
	 => [1, 3, 5, 7, 11, 13] 
	3.0.0 :239 > a.insert(3,9)
	 => [1, 3, 5, 9, 7, 11, 13] 
	 
7) concat() is a Array class method which returns the array after appending the two arrays together. (add other array elements in self)

--> concat(*other_arrays) → self 
	3.0.0 :241 > a=[1,2,3]
	 => [1, 2, 3] 
	3.0.0 :242 > a.concat([5,6,7],[8,9,10])
	 => [1, 2, 3, 5, 6, 7, 8, 9, 10] 
	3.0.0 :243 > a
 	=> [1, 2, 3, 5, 6, 7, 8, 9, 10] 
 	
8) fill() is a Array class method which fills the array with the element and that can be in a specific range.
			fill elements at all position if not range passed 

-->	 fill(obj) → self   # fill object at all position
	3.0.0 :251 > a=[1,2]
 	=> [1, 2] 
	3.0.0 :252 > a.fill(3)
 	=> [3, 3] 

-->	fill(obj, start) → self    # fill object at all position from given starting position 
	3.0.0 :253 > a
	 => [3, 3] 
	3.0.0 :254 > a=[1,2,3,4]
 	=> [1, 2, 3, 4] 
	3.0.0 :255 > a.fill(7,1)
	 => [1, 7, 7, 7] 

-->	fill(obj, start, length) → self    # fill obj from given start position and length
	3.0.0 :259 > a=[2,5,7,4,5]
 	=> [2, 5, 7, 4, 5] 
	3.0.0 :260 > a.fill(100,2,2)
 	=> [2, 5, 100, 100, 5] 


-->	fill(obj, range) → self
   3.0.0 :261 > a
	 => [2, 5, 100, 100, 5] 
	3.0.0 :262 > a.fill(500,1..3)
 	=> [2, 500, 500, 500, 5] 

-->	fill {|index| ... } → self

--> fill(start) {|index| ... } → self

-->	fill(start, length) {|index| ... } → self
-->	fill(range) {|index| ... } → self 

9. replace() is a Array class method which returns an array of all combinations of elements from all arrays.
 
--> replace(other_array) → self
	3.0.0 :265 > a
	 => [2, 500, 500, 500, 5] 
	3.0.0 :266 > a.replace([5,10])
 	=> [5, 10] 
	3.0.0 :267 > a
	 => [5, 10] 

10) reverse() is a Array class method which returns a new array containing self’s elements in reverse order.

--> reverse! → self
	3.0.0 :268 > a
 	=> [5, 10] 
	3.0.0 :269 > a.reverse!
	 => [10, 5] 
	3.0.0 :270 > a
	 => [10, 5] 

11) rotate!() is a Array class method which returns self rotated in place so that the element at count comes first, and returns self.

--> rotate! → self
	3.0.0 :274 > a=[5,10,15,20]
	 => [5, 10, 15, 20] 
	3.0.0 :275 > a.rotate!
	 => [10, 15, 20, 5] 
	3.0.0 :276 > a
	 => [10, 15, 20, 5] 


--> rotate!(count) → self 
	3.0.0 :277 > a
	 => [10, 15, 20, 5] 
	3.0.0 :278 > a.rotate!(2)
 	=> [20, 5, 10, 15] 
 	
 	3.0.0 :280 > a
	=> [20, 5, 10, 15] 
	3.0.0 :281 > a.rotate!(-2)       # When given a negative Integer count, rotates in the opposite direction, from end to beginning
	 => [10, 15, 20, 5] 

12) shuffle!() is a Array class method which shuffles elements in self in place. 
--> shuffle!(random: Random) → array
	3.0.0 :282 > a
	 => [10, 15, 20, 5] 
	3.0.0 :283 > a.shuffle!
	 => [10, 20, 15, 5] 
	3.0.0 :284 > a
	 => [10, 20, 15, 5] 
	
13) sort!() is a Array class method which returns sorted self array in place. 
-->	 sort! → self 
	3.0.0 :285 > a
	 => [10, 20, 15, 5] 
	3.0.0 :286 > a.sort!
	 => [5, 10, 15, 20] 
	3.0.0 :287 > a
	 => [5, 10, 15, 20] 

-->	sort! {|a, b| ... } → self 
	
	3.0.0 :289 > a=[5,2,8,4,9,6]
	 => [5, 2, 8, 4, 9, 6] 
	3.0.0 :290 > a.sort! {|a,b| b<=>a}          # reverse sorting
	 => [9, 8, 6, 5, 4, 2] 
	3.0.0 :291 > a
	 => [9, 8, 6, 5, 4, 2] 

14) sort_by!() is a Array class method which returns the enumerator for the sorted array.

--> sort_by! {|element| ... } → self
	3.0.0 :294 > a=['a','aaaa','aa','aaaaa','aaa']
	 => ["a", "aaaa", "aa", "aaaaa", "aaa"] 
	3.0.0 :295 > a.sort_by! {|element| element.size}
	 => ["a", "aa", "aaa", "aaaa", "aaaaa"] 
	3.0.0 :296 > a
	 => ["a", "aa", "aaa", "aaaa", "aaaaa"] 
	3.0.0 :297 > 


--> sort_by! → new_enumerator 
	3.0.0 :297 > a.sort_by!
	 => #<Enumerator: ["a", "aa", "aaa", "aaaa", "aaaaa"]:sort_by!> 


-----------------------------------------------------Methods for Deleting--------------------------------------------
Note -------Each of these methods removes elements from self: 

1) pop() is a Array class method which checks removes the last element from the array and returns it.
--> pop → object or nil   # return pop element
	3.0.0 :301 > a=[5,4,7,8]
	 => [5, 4, 7, 8] 
	3.0.0 :302 > a.pop
	 => 8 
	3.0.0 :303 > a
	 => [5, 4, 7] 

--> pop(n) → new_array 
	3.0.0 :304 > a
	 => [5, 4, 7] 
	3.0.0 :305 > a.pop(2)       # pop last two elements
	 => [4, 7] 
	3.0.0 :306 > a
	 => [5] 

2) shift() is a Array class method which removes the first element of self and returns it or nil if the array is empty.

--> shift → object or nil
	3.0.0 :312 > a=[5,4,7,2,1]
	 => [5, 4, 7, 2, 1] 
	3.0.0 :313 > a.shift
	 => 5 
	3.0.0 :314 > a
	 => [4, 7, 2, 1] 

--> shift(n) → new_array 
	3.0.0 :315 > a
	 => [4, 7, 2, 1] 
	3.0.0 :316 > a.shift(2)
	 => [4, 7] 
	3.0.0 :317 > a
	 => [2, 1] 

3) compact! () is a Array class method which returns the array after removing all the ‘nil’ value elements (if any) from the array. If 					there are no nil values in the array it returns back the nil value.

--> compact! → self or nil      # return self if nil values else return nil
	3.0.0 :321 > a=[5,nil,nil,5,5]
	 => [5, nil, nil, 5, 5] 
	3.0.0 :322 > a.compact!
	 => [5, 5, 5] 
	3.0.0 :323 > a
	 => [5, 5, 5] 

4) delete() is a Array class method which returns the array after deleting the mentioned elements. It can also delete a particular 				element in the array. 

--> delete(obj) → deleted_object 
	3.0.0 :328 > a=[5,4,7,8]
	 => [5, 4, 7, 8] 
	3.0.0 :329 > a.delete(4)
	 => 4 
	3.0.0 :330 > a
	 => [5, 7, 8] 
	3.0.0 :331 > a.delete(10)
	 => nil 

--> delete(obj) {|nosuch| ... } → deleted_object or block_return 
	3.0.0 :347 > a=[5,7,5,5,6,3]
	 => [5, 7, 5, 5, 6, 3] 
	3.0.0 :348 > a.delete(20) {|ele| "element not found"}          # return block value
	 => "element not found" 
	3.0.0 :349 > a.delete(5) {|ele| "element not found"}
	 => 5 
	3.0.0 :350 > a
	 => [7, 6, 3] 

5) delete_at() is a Array class method which deletes the arrays elements at the mentioned index. 

--> delete_at(index) → deleted_object or nil
	3.0.0 :351 > a
	 => [7, 6, 3] 
	3.0.0 :352 > a.delete_at(1)
	 => 6 
	3.0.0 :353 > a
	 => [7, 3] 
	 
-->	When index is negative, counts backward from the end of the array:
	3.0.0 :354 > a
	 => [7, 3] 
	3.0.0 :355 > a.delete_at(-1)
	 => 3 
	3.0.0 :356 > a
	 => [7] 

6) delete_if() is a Array class method which deletes the arrays elements for which the block condition satisifies.

--> delete_if {|element| ... } → self click to toggle source
	3.0.0 :357 > a=[5,4,3,8,7]
	 => [5, 4, 3, 8, 7] 
	3.0.0 :358 > a.delete_if {|ele| ele<10}
	 => [] 
	3.0.0 :359 > a
	 => [] 

--> delete_if → Enumerator 
	3.0.0 :360 > a=[5,4,3,8,7]
	 => [5, 4, 3, 8, 7] 
	3.0.0 :361 > a.delete_if
	 => #<Enumerator: [5, 4, 3, 8, 7]:delete_if> 
	 
7) keep_if() is a Array class method Retains those elements for which the block returns a truthy value; deletes all other elements; 			returns self:

-->  keep_if {|element| ... } → self 
	3.0.0 :362 > a
	 => [5, 4, 3, 8, 7] 
	3.0.0 :363 > a.keep_if {|ele| ele>5}
	 => [8, 7] 
	3.0.0 :364 > a
	 => [8, 7] 
	 
-->  keep_if → new_enumeration 	 

	3.0.0 :365 > a.keep_if
	 => #<Enumerator: [8, 7]:keep_if> 

8) reject!() Removes each element for which the block returns a truthy value. Returns self if any elements removed

--> reject! {|element| ... } → self or nil
	3.0.0 :367 > a=[5,7,6,4,2]
	 => [5, 7, 6, 4, 2] 
	3.0.0 :368 > a.reject! {|ele| ele>3}
	 => [2] 
	3.0.0 :369 > a
	 => [2] 
	 
--> reject! → new_enumerator
	3.0.0 :373 > a=[1,2]
	 => [1, 2] 
	3.0.0 :374 > a.reject!
	 => #<Enumerator: [1, 2]:reject!>  
	 
9) select!() or filter!() - Calls the block, if given with each element of self; removes from self those elements for which the block 								returns false or nil.

--> select! {|element| ... } → self or nil
	3.0.0 :378 > a
	 => [5, 4, 3, 6, 9] 
	3.0.0 :379 > a.select! {|ele| ele>3}
	 => [5, 4, 6, 9] 
	3.0.0 :380 > a
	 => [5, 4, 6, 9] 

--> select! → new_enumerator
	3.0.0 :376 > a=[5,4,3,6,9]
	 => [5, 4, 3, 6, 9] 
	3.0.0 :377 > a.select!
	 => #<Enumerator: [5, 4, 3, 6, 9]:select!> 
	 
10) slice!() - Removes and returns elements from self. When the only argument is an Integer n, removes and returns the nth element in self

--> slice!(n) → object or nil
	3.0.0 :385 > a
	 => [5, 4, 6, 9] 
	3.0.0 :386 > a.slice!(2)
	 => 6 
	3.0.0 :387 > a
	 => [5, 4, 9] 	

--> slice!(start, length) → new_array or nil
	3.0.0 :387 > a
	 => [5, 4, 9] 
	3.0.0 :388 > a.slice!(1,2)
	 => [4, 9] 
	3.0.0 :389 > a
	 => [5] 

--> slice!(range) → new_array or nil 
	3.0.0 :390 > a=[5,4,3]
	 => [5, 4, 3] 
	3.0.0 :391 > a.slice!(1..3)
	 => [4, 3] 
	3.0.0 :392 > a
	 => [5] 

11) uniq!() - Removes duplicate elements from self, the first occurrence always being retained; returns self if any elements removed, 					nil otherwise. With no block given, identifies and removes elements using method eql? to compare. Returns self if any 					elements removed

--> uniq! → self or nil 
	3.0.0 :394 > a=[1,1,5,5,8,9]
	 => [1, 1, 5, 5, 8, 9] 
	3.0.0 :395 > a.uniq!
	 => [1, 5, 8, 9] 
	3.0.0 :396 > a
	 => [1, 5, 8, 9] 

--> uniq! {|element| ... } → self or nil 
	
	3.0.0 :401 > a=['a','b','c']
	 => ["a", "b", "c"] 
	3.0.0 :402 > a.uniq! {|ele| ele.size}   # delete unique size elements 
	 => ["a"] 
	3.0.0 :403 > a
	 => ["a"] 


-------------------------------------------------Methods for Combining-----------------------------------
1) array & other_array → new_array   (Intersection) 

Returns a new Array containing each element found in both array and Array other_array; duplicates are omitted; items are compared using eql?:

	3.0.0 :408 > a
	 => [5, 4, 8, 7] 
	3.0.0 :409 > b
	 => [5, 4, 6, 3] 
	3.0.0 :410 > c=a&b
	 => [5, 4] 

2)  intersection(*other_arrays) → new_array

Returns a new Array containing each element found both in self and in all of the given Arrays other_arrays; duplicates are omitted; items are compared using eql?:

	3.0.0 :411 > a
	 => [5, 4, 8, 7] 
	3.0.0 :412 > b
	 => [5, 4, 6, 3] 
	3.0.0 :413 > c=a.intersection(b)
	 => [5, 4] 
	3.0.0 :414 > c
	 => [5, 4] 


3)  array + other_array → new_array

	Returns a new Array containing all elements of array followed by all elements of other_array:
	
	3.0.0 :415 > a
	 => [5, 4, 8, 7] 
	3.0.0 :416 > b
	 => [5, 4, 6, 3] 
	3.0.0 :417 > c=a+b
	 => [5, 4, 8, 7, 5, 4, 6, 3] 

4) array - other_array → new_array 

Returns a new Array containing only those elements from array that are not found in Array & other_array; items are compared using eql?; the order from array is preserved

	3.0.0 :418 > a
	 => [5, 4, 8, 7] 
	3.0.0 :419 > b
	 => [5, 4, 6, 3] 
	3.0.0 :420 > c=a-b
	 => [8, 7]

5)  array | other_array → new_array 

Returns the union of array and Array other_array; duplicates are removed; order is preserved; items are compared using eql?:

	3.0.0 :421 > a
	 => [5, 4, 8, 7] 
	3.0.0 :422 > b
	 => [5, 4, 6, 3] 
	3.0.0 :423 > c=a|b
	 => [5, 4, 8, 7, 6, 3] 

6)  union(*other_arrays) → new_array

Returns a new Array that is the union of self and all given Arrays other_arrays; duplicates are removed; order is preserved; items are compared using eql?:

	3.0.0 :424 > a
	 => [5, 4, 8, 7] 
	3.0.0 :425 > b
	 => [5, 4, 6, 3] 
	3.0.0 :426 > c=a.union(b)
	 => [5, 4, 8, 7, 6, 3] 


7)  difference(*other_arrays) → new_array click to toggle source

Returns a new Array containing only those elements from self that are not found in any of the Arrays other_arrays; items are compared using eql?; order from self is preserved

	3.0.0 :427 > a
	 => [5, 4, 8, 7] 
	3.0.0 :428 > b
	 => [5, 4, 6, 3] 
	3.0.0 :429 > c=a.difference(b)
	 => [8, 7] 

8)  product(*other_arrays) → new_array 
product(*other_arrays) {|combination| ... } → self

Computes and returns or yields all combinations of elements from all the Arrays, including both self and other_arrays.

    The number of combinations is the product of the sizes of all the arrays, including both self and other_arrays.
    The order of the returned combinations is indeterminate.

	3.0.0 :464 > a=[5,2]
	 => [5, 2] 
	3.0.0 :465 > b=[8,9]
	 => [8, 9] 
	3.0.0 :466 > c=a.product(b)
	 => [[5, 8], [5, 9], [2, 8], [2, 9]] 


When a block is given, yields each combination as an Array; returns self:

	3.0.0 :478 >c= a.product(b) {|combination| p combination}
	[5, 8]
	[5, 9]
	[2, 8]
	[2, 9]

	c= [5,2]


--------------------------------------------------Methods for Iterating---------------------------------------------

1) each() is a Array class method which returns the array by following the condition in the given block once for each element in self. 
		Iterates over array elements. When a block given, passes each successive array element to the block; returns self
		
	3.0.0 :508 > a.each {|ele| puts "#{ele.class} #{ele}"}  
	Integer 5
	String a
	Float 2.3
	Array [5, 4]
	 => [5, "a", 2.3, [5, 4]] 

	3.0.0 :509 > a.each
	 => #<Enumerator: [5, "a", 2.3, [5, 4]]:each> 

2) reverse_each() is a Array class method which traverses self in reverse order. Iterates backwards over array elements.
			      When a block given, passes, in reverse order, each element to the block; returns self
			      
	3.0.0 :510 > a
	 => [5, "a", 2.3, [5, 4]] 
	3.0.0 :511 > a.reverse_each {|ele| puts "#{ele.class} #{ele}"}
	Array [5, 4]
	Float 2.3
	String a
	Integer 5
	 => [5, "a", 2.3, [5, 4]] 

3) each_index() is a Array class method which returns the index of the array element by following the condition in the given block once 				for each_index element in self. Iterates over array indexes. When a block given, passes each successive array index to 					the block; returns self.

	3.0.0 :514 >   a.each_index {|index| puts "#{index} #{a[index]}"} 
	0 5
	1 a
	2 2.3
	3 [5, 4]
	 => [5, "a", 2.3, [5, 4]] 

4) cycle() is a Array class method which returns the array by calling the given block each time for every element in the array ‘n’ no. 					of times and if ‘nil’ is given, then it will call it for forever. 
				When called with positive Integer argument count and a block, calls the block with each element, then does so again, 					until it has done so count times; returns nil:
				
-->	 cycle {|element| ... } → nil
-->  cycle(count) {|element| ... } → nil
-->  cycle → new_enumerator
-->  cycle(count) → new_enumerator 

		3.0.0 :001 > a=[]
		 => [] 
		3.0.0 :002 > [1,2,3].cycle(2) {|ele| a.push(ele)}
		 => nil 
		3.0.0 :003 > a
		 => [1, 2, 3, 1, 2, 3] 

5)  combination() -  Calls the block, if given, with combinations of elements of self; returns self. The order of combinations is     indeterminate.

When a block and an in-range positive Integer argument n (0 < n <= self.size) are given, calls the block with all n-tuple combinations of self.

--> combination(n) {|element| ... } → self click to toggle source
	3.0.0 :004 > a
	 => [1, 2, 3, 1, 2, 3] 
	3.0.0 :005 > a.combination(1) {|combination| p combination}
	[1]
	[2]
	[3]
	[1]
	[2]
	[3]
	 => [1, 2, 3, 1, 2, 3] 
	3.0.0 :006 > a.combination(2) {|combination| p combination}
	[1, 2]
	[1, 3]
	[1, 1]
	[1, 2]
	[1, 3]
	[2, 3]
	[2, 1]
	[2, 2]
	[2, 3]
	[3, 1]
	[3, 2]
	[3, 3]
	[1, 2]
	[1, 3]
	[2, 3]
	 => [1, 2, 3, 1, 2, 3] 

--> combination(n) → new_enumerator 
	3.0.0 :008 > a.combination(2)
	 => #<Enumerator: [1, 2, 3, 1, 2, 3]:combination(2)> 
	 
6) permutation() - permutation() is a Array class method which returns all permutations of length n of the elements of the array, then 						return the array itself.

 permutation {|element| ... } → self 
			 3.0.0 :097 > a.permutation {|permutation| p permutation}
			[1, 2, 3]
			[1, 3, 2]
			[2, 1, 3]
			[2, 3, 1]
			[3, 1, 2]
			[3, 2, 1]
			 => [1, 2, 3] 
permutation(n) {|element| ... } → self

	3.0.0 :096 > a.permutation(2) {|permutation| p permutation}
	[1, 2]
	[1, 3]
	[2, 1]
	[2, 3]
	[3, 1]
	[3, 2]
	 => [1, 2, 3] 
permutation → new_enumerator
permutation(n) → new_enumerator 

	3.0.0 :098 > a.permutation
	 => #<Enumerator: [1, 2, 3]:permutation> 
	3.0.0 :099 > a.permutation(2)
	 => #<Enumerator: [1, 2, 3]:permutation(2)> 

7) repeated_combination() is a Array class method which returns all repeated combinations of length n of elements from the array and 							  then returns the array itself.
--> repeated_combination(n) {|combination| ... } → self 
	3.0.0 :115 > a.repeated_combination(1) {|combination| p combination}
	[1]
	[2]
	[3]
	 => [1, 2, 3] 
	3.0.0 :116 > a.repeated_combination(2) {|combination| p combination}
	[1, 1]
	[1, 2]
	[1, 3]
	[2, 2]
	[2, 3]
	[3, 3]
	 => [1, 2, 3] 
	3.0.0 :117 > a.repeated_combination(3) {|combination| p combination}
	[1, 1, 1]
	[1, 1, 2]
	[1, 1, 3]
	[1, 2, 2]
	[1, 2, 3]
	[1, 3, 3]
	[2, 2, 2]
	[2, 2, 3]
	[2, 3, 3]
	[3, 3, 3]
	 => [1, 2, 3] 

--> repeated_combination(n) → new_enumerator 
	3.0.0 :119 > a.repeated_combination(2)
	 => #<Enumerator: [1, 2, 3]:repeated_combination(2)> 


	 
8) repeated_permutation() - repeated_permutation() is a Array class method which returns all repeated permutations of length n of the elements of the array, then return the array itself

--> repeated_permutation(n) {|permutation| ... } → self
3.0.0 :100 > a
 => [1, 2, 3] 
	3.0.0 :101 > a.repeated_permutation(1) {|permutation| p permutation}
	[1]
	[2]
	[3]
	 => [1, 2, 3] 
	3.0.0 :102 > a.repeated_permutation(2) {|permutation| p permutation}
	[1, 1]
	[1, 2]
	[1, 3]
	[2, 1]
	[2, 2]
	[2, 3]
	[3, 1]
	[3, 2]
	[3, 3]
	 => [1, 2, 3] 

--> repeated_permutation(n) → new_enumerator 
	3.0.0 :103 > a.repeated_permutation(2)
	 => #<Enumerator: [1, 2, 3]:repeated_permutation(2)> 
	 
------------------------------------------------------Methods for Converting-------------------------------------

1) map() or collect() is a Array class method which returns a new array containing the values returned by the block.

--> map {|element| ... } → new_array
	3.0.0 :128 > a
	 => [1, 2, 3] 
	3.0.0 :129 > a.map {|ele| ele.class}
	 => [Integer, Integer, Integer] 

--> map → new_enumerator 
	3.0.0 :130 > a.map
	 => #<Enumerator: [1, 2, 3]:map> 
	 
note - Array#collect is an alias for Array#map.

2) map!() or collect!()  # return changed or modify self
--> map! {|element| ... } → self 
	3.0.0 :138 > a
	 => ["a", [5, 6]] 
	3.0.0 :139 > a.map! {|ele| ele.class}
	 => [String, Array] 
	3.0.0 :140 > a
	 => [String, Array] 

--> map! → new_enumerator 
	3.0.0 :141 > a.map!
	 => #<Enumerator: [String, Array]:map!> 
	3.0.0 :142 > a
	 => [String, Array] 
	
3) flatten() is an Array class method which returns flattened array i.e. a 1D array
	Returns a new Array that is a recursive flattening of self:

    Each non-Array element is unchanged.

    Each Array is replaced by its individual elements.

	With non-negative Integer argument level, flattens recursively through level levels:
	
--> flatten → new_array 
	3.0.0 :144 > a
	 => [5, [6, [7]]] 
	3.0.0 :145 > a.flatten
	 => [5, 6, 7] 
	3.0.0 :146 > a
	 => [5, [6, [7]]] 
	
--> flatten(level) → new_array 
	3.0.0 :147 > a
	 => [5, [6, [7]]] 
	3.0.0 :148 > a.flatten(0)
	 => [5, [6, [7]]] 
	3.0.0 :149 > a.flatten(1)
	 => [5, 6, [7]] 
	3.0.0 :150 > a.flatten(2)
	 => [5, 6, 7]  

--> With no argument, a nil argument, or with negative argument level, flattens all levels:
	3.0.0 :155 > a.flatten(-1)
	 => [5, 6, 7] 
	
4)  flatten! → self or nil- flatten to self
flatten!(level) → self or nil 

	3.0.0 :156 > a
	 => [5, [6, [7]]] 
	3.0.0 :157 > a.flatten!
	 => [5, 6, 7] 
	3.0.0 :158 > a
	 => [5, 6, 7] 

5) Inspect() is an Array class method which returns the all array elements. 

--> inspect → new_string

	3.0.0 :171 > a
	 => ["a", "b", "c"] 
	3.0.0 :172 > b=a.inspect
	 => "[\"a\", \"b\", \"c\"]" 
	3.0.0 :173 > b.class
	 => String 
6) to_s() - alias to inspect() & old_to_s

	3.0.0 :174 > a
	 => ["a", "b", "c"] 
	3.0.0 :175 > a.to_s
	 => "[\"a\", \"b\", \"c\"]" 
	 
7)join() is an Array class method which returns the string which is created by converting each element of the array to a string, 			 separated by the given separator.

--> join →new_string 
	3.0.0 :177 > a.join
	 => "abc" 
	3.0.0 :178 > a
	 => ["a", "b", "c"] 

--> join(separator = $,) → new_string 

	3.0.0 :186 > a=["d","e","e","p","a","k"]
	 => ["d", "e", "e", "p", "a", "k"] 
	3.0.0 :187 > a.join("\n")
	 => "d\ne\ne\np\na\nk" 
	3.0.0 :188'> a.join('\n')
	 => "d\\ne\\ne\\np\\na\\nk" 

8) to_a() is a Array class method which returns self array. 
-->  to_a → self or new_array
	 3.0.0 :205 > a
	 => [5, 4, 3] 
	3.0.0 :206 > a.object_id
	 => 300 
	3.0.0 :207 > b=a.to_a
	 => [5, 4, 3] 
	3.0.0 :208 > b.object_id
	 => 300    
	 
9) to_h() is a Array class method which returns the result of interpreting ary as an array of [key, value] pairs.

--> to_h → new_hash
	3.0.0 :233 > a=[['A',65],['B',66],['C',67]]
	 => [["A", 65], ["B", 66], ["C", 67]] 
	3.0.0 :234 > a.to_h
	 => {"A"=>65, "B"=>66, "C"=>67} 
	 
--> to_h {|item| ... } → new_hash 
	3.0.0 :240 > a=[5,10,20,30]
	 => [5, 10, 20, 30] 
	3.0.0 :241 > a.to_h {|item| [item,item]}
	 => {5=>5, 10=>10, 20=>20, 30=>30} 

10) transpose() is a Array class method which returns the length of elements in the array transposes the rows and columns.

--> transpose → new_array 
	3.0.0 :244 > a=[['A',65],['B',66],['C',67]]
	 => [["A", 65], ["B", 66], ["C", 67]] 
	3.0.0 :245 > a.transpose
	 => [["A", "B", "C"], [65, 66, 67]] 
	
11) zip() is a Array class method which Converts any arguments to arrays, then merges elements of self with corresponding elements from 			each argument.

-->  zip(*other_arrays) → new_array 
	3.0.0 :246 > a
	 => [["A", 65], ["B", 66], ["C", 67]] 
	3.0.0 :247 > b=[5,6]
	 => [5, 6] 
	3.0.0 :248 > c=[8,9]
	 => [8, 9] 
	3.0.0 :249 > a.zip(b,c)
	 => [[["A", 65], 5, 8], [["B", 66], 6, 9], [["C", 67], nil, nil]] 

-->  zip(*other_arrays) {|other_array| ... } → nil 

--------------------------------------------------Other Methods---------------------------------------------

1)  array * n → new_array 

	3.0.0 :258 > a=[5,6]
	 => [5, 6] 
	3.0.0 :259 > a*3
	 => [5, 6, 5, 6, 5, 6] 

    array * string_separator → new_string
    3.0.0 :263 > b=a*','
	 => "5,6" 
	3.0.0 :264 > b.class
	 => String 


When non-negative argument Integer n is given, returns a new Array built by concatenating the n copies of self

2)  sum(init = 0) → object 
	3.0.0 :279 > a=[1,2,3]
	 => [1, 2, 3] 
	3.0.0 :280 > a.sum          # 1+2+3 = 6
	 => 6 
	 
	3.0.0 :282 > a
	 => [1, 2, 3] 
	3.0.0 :283 > a.sum(4)             # 4+1+2+3  = 10
	 => 10 

--> sum(init = 0) {|element| ... } → object 

	3.0.0 :284 > a
	 => [1, 2, 3] 
	3.0.0 :285 > a.sum {|obj| obj**2}                 #1**2+2**2+3**2 = 1+4+9 = 14
	 => 14 

3) pack() is a Array class method which returns the contents of arr into a binary sequence according to the directives in aTemplateString

--> pack( aTemplateString ) → aBinaryString
	3.0.0 :293 > a
	 => [1, 2, 3] 
	3.0.0 :294 > a.pack('ccc')       #c for integer , a for string
	 => "\x01\x02\x03" 



