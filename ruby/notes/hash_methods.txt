-------------------------------------------------------HASH---------------------------------------------------------------------------

A Hash is a collection of key-value pairs like this: "employee" = > "salary". It is similar to an Array, except that indexing is done via arbitrary keys of any object type, not an integer index.

---------------------------------------------------Hash Data Syntax------------------------------------------------------

older syntax-- 
	h= {:A=>65, :B=>66, :C=>67} 


New Syntax: -
-->	3.0.0 :007 > h={A: 65, B: 66, C: 67}
 	=> {:A=>65, :B=>66, :C=>67} 

--> 3.0.0 :009 > h={'A': 65, 'B': 66, 'C': 67}
 	=> {:A=>65, :B=>66, :C=>67} 
 
 -------------------------------------------------Creating a Hash-------------------------------------------------------------
 3 ways - 
    
    i) Method Hash.new
   ii) Method Hash[]
  iii) Literal form: {}.

1) Create an empty Hash--
	
 	3.0.0 :010 > h=Hash.new
	 => {} 
	3.0.0 :011 > h=Hash[]
	 => {} 
	3.0.0 :012 > h={}
	 => {} 
	 

---------------------------------------------------Methods for Creating a Hash----------------------------------------------------------
1) Public Class Methods ------------->

1) Hash[] - Returns a new Hash object populated with the given objects, if any. See ::new. With no argument, returns a new empty Hash.
			When the single given argument is a Hash, returns a new Hash populated with the entries from the given Hash.

-->	Hash[] → new_empty_hash 
	3.0.0 :023 > h=Hash[]
	 => {} 

-->	Hash[hash] → new_hash

	3.0.0 :024 > h = {"A"=>65, "B"=>66, "C"=>76}
	 => {"A"=>65, "B"=>66, "C"=>76} 
	3.0.0 :025 > hash1 = Hash(h)
	 => {"A"=>65, "B"=>66, "C"=>76} 
	3.0.0 :026 > hash1
	 => {"A"=>65, "B"=>66, "C"=>76} 

-->	Hash[ [*2_element_arrays] ] → new_hash
	3.0.0 :032 > a
	 => [["A", 65], ["B", 66]] 
	3.0.0 :033 > h=Hash[a]
	 => {"A"=>65, "B"=>66} 

-->	Hash[*objects] → new_hash 
	3.0.0 :034 > h=Hash['A', 65, 'B', 66]
 	=> {"A"=>65, "B"=>66} 
 	
	3.0.0 :036 > h=Hash[1, 2, 3, 4]   # cretae hash for even arguments only
	 => {1=>2, 3=>4} 

	h=Hash[1, 2, 3, 4, 5]    #Error - (odd number of arguments for Hash)

	
2) new() - Returns a new empty Hash object. The initial default value and initial default proc for the new hash depend on which form above 				was used. 

--> new(default_value = nil) → new_hash
e.g.	3.0.0 :047 > h=Hash.new
		 => {} 
		3.0.0 :048 > h.default
		 => nil 
		3.0.0 :049 > h.default_proc
		 => nil 
e.g.	3.0.0 :050 > h=Hash.new("Default values")
		 => {} 
		3.0.0 :051 > h.default
		 => "Default values" 
		3.0.0 :052 > h.default_proc
		 => nil 	
		 
-->	new {|hash, key| ... } → new_hash 


3) try_convert(obj) → obj, new_hash, or nil 

If obj is a Hash object, returns obj.

Otherwise if obj responds to :to_hash, calls obj.to_hash and returns the result.

Returns nil if obj does not respond to :to_hash

		3.0.0 :054 > h=Hash.try_convert({'A' => 65})
		 => {"A"=>65} 
		3.0.0 :055 > h
		 => {"A"=>65} 

---------------------------------------Methods for Setting Hash State----------------------------------------------
II) Public Instance Methods----------------------->

1) compare_by_identity → self - Sets self to consider only identity in comparing keys; two keys are considered the same only if they are 									the same object; returns self.

	3.0.0 :134 > h={'A' => 65, 'B' => 66}
	 => {"A"=>65, "B"=>66} 
	3.0.0 :135 > h['A']
	 => 65 
	3.0.0 :136 > h['B']
	 => 66 
	3.0.0 :137 > h.compare_by_identity?
	 => false 
	3.0.0 :138 > h.compare_by_identity          # by using this insert duplicate keys 
	 => {"A"=>65, "B"=>66} 
	3.0.0 :139 > h['A']
	 => nil 
	3.0.0 :140 > h['A'] = 69
	 => 69 
	3.0.0 :141 > h
	 => {"A"=>65, "B"=>66, "A"=>69} 
	3.0.0 :142 > h.compare_by_identity?
	 => true 
	3.0.0 :143 > h['A']=65
	 => 65 
	3.0.0 :144 > h
	 => {"A"=>65, "B"=>66, "A"=>69, "A"=>65} 
	 
2)  compare_by_identity? → true or false-- Returns true if compare_by_identity has been called, false otherwise.
	 
	 3.0.0 :142 > h.compare_by_identity?      # return true bcz called comprae_by_identity 
	 => true 

3)  default = value → object --> Sets the default value to value; returns value:

	3.0.0 :145 > h
	 => {"A"=>65, "B"=>66, "A"=>69, "A"=>65} 
	3.0.0 :146 > h.default
	 => nil 
	3.0.0 :147 > h.default= 'default_value'
	 => "default_value" 
	3.0.0 :148 > h.default
	 => "default_value" 

4)  default_proc = proc → proc -- Sets the default proc for self to proc	

	3.0.0 :149 > h.default_proc
	 => nil 
	3.0.0 :150 > h.default_proc = proc { |hash,key| "default value for #{key}"}
	 => #<Proc:0x000055f088918bc8 (irb):150> 
	3.0.0 :151 > h.default_proc
	 => #<Proc:0x000055f088918bc8 (irb):150> 


5) rehash → self - Rebuilds the hash table by recomputing the hash index for each key; returns self. 
	3.0.0 :154 > h.rehash
	 => {"A"=>65, "B"=>66, "A"=>69, "A"=>65} 


-----------------------------------------------Methods for Querying-----------------------------------------------

1) any? () - Returns true if any element satisfies a given criterion; false otherwise.
 			 With no argument and no block, returns true if self is non-empty; false if empty. 

	any? → true or false 
	3.0.0 :114 > h.any?       # returns true if self is non-empty; false if empty    
	 => true 
		
	any?(object) → true or false
	3.0.0 :113 > h
	 => {"A"=>65, "B"=>66, "C"=>67, "D"=>69} 
	3.0.0 :114 > h.any?
	 => true 
	3.0.0 :115 > h.any?(['A', 65])
	 => true 
	3.0.0 :116 > h.any?(['A', 69])
	 => false 

	any? {|key, value| ... } → true or false 

	3.0.0 :007 > h
	 => {"A"=>65, "B"=>66} 
	3.0.0 :008 > h.any? {|key, value| value>65 }
	 => true 
	3.0.0 :009 > h.any? {|key, value| value>70 }
	 => false 
	3.0.0 :010 > h.any? {|key, value| value>60 }
	 => true 

2) default  -  Returns the default value for the given key. The returned value will be determined either by the default proc or by the 					default value 

--> default → object
	3.0.0 :016 > h
	 => {"A"=>65, "B"=>66} 
	3.0.0 :017 > h.default
	 => nil 

--> default(key) → object 
	3.0.0 :018 > g = Hash.new { |hash, key| hash[key] = "No key #{key}"}
	 => {} 

	3.0.0 :020 > g['A']
	 => "No key A" 
	3.0.0 :021 > g.default('A')
	 => "No key A" 

3)  eql? object → true or false
	Returns true if all of the following are true:
    object is a Hash object.
    hash and object have the same keys (regardless of order).
    For each key key, h[key] eql? object[key].   # value 

	Otherwise, returns false.

		3.0.0 :025 > h.eql?g
		 => false 
		3.0.0 :026 > g['B']
		 => "No key B" 
		3.0.0 :027 > h
		 => {"A"=>65, "B"=>66} 
		3.0.0 :028 > g
		 => {"A"=>"No key A", "B"=>"No key B"} 
		3.0.0 :029 > h.eql?g
		 => false

	3.0.0 :002 > h={'A' => 65, 'B' => 66}
	 => {"A"=>65, "B"=>66} 
	3.0.0 :003 > g={'A' => 65, 'B' => 66}
	 => {"A"=>65, "B"=>66} 
	3.0.0 :004 > h.eql?g
	 => true 

4)  hash → an_integer -- Returns the Integer hash-code for the hash.
	Two Hash objects have the same hash-code if their content is the same (regardless or order):
	
	3.0.0 :005 > h.hash
	 => -1033875940828079217 
	3.0.0 :006 > g.hash
	 => -1033875940828079217 
	 
5)  has_value?() is a Hash class method which checks whether the given value is present in hash.(Method value? is an alias for 						#has_value?.) 
	 Returns true if value is a value in self, otherwise false.
	 
---> has_value?(value) → true or false  
	 
	3.0.0 :008 > h
	 => {"A"=>65, "B"=>66} 
	3.0.0 :009 > h.has_value?(65)
	 => true 
	3.0.0 :010 > h.has_value?(69)
 	=> false 
	
---> value?(value) → true or false	
	3.0.0 :011 > h.value?(69)            # value()  is an alias for has_value? 
 	=> false  
	3.0.0 :012 > h.value?(65)
	 => true 

	
	 
6) include?() is a Hash class method which checks whether the given key is present in hash.
	 
-->	 include?(key) → true or false - Returns true if key is a key in self, otherwise false.
	 3.0.0 :013 > h.include?('A')
	 => true 
	3.0.0 :014 > h.include?('D')
	 => false 
	 
---> has_key? () -----------------------------Alias for include?()	
	3.0.0 :015 > h.has_key?('D')
	 => false 
	3.0.0 :016 > h.has_key?('A')
 	=> true 
 
--> member? () -----------------------------Alias for include?()		 
	 
	3.0.0 :004 > h
	 => {"A"=>65, "B"=>66} 
	3.0.0 :005 > h.member?('A')
	 => true 
	3.0.0 :006 > h.member?('D')
	 => false  
	 
--> key? () -----------------------------Alias for include?()		 
	 
	3.0.0 :007 > h.key?('A')
 	=> true 
	3.0.0 :008 > h.key?('D')
	 => false 
	 
7) length() and size() - is a Hash class method which gives number of key-value pairs in the hash.	 
	 
--->  length → integer---	Returns the count of entries in self:

	3.0.0 :009 > h.length()
 	=> 2  
	 
---> size → integer
	3.0.0 :010 > h.size
	 => 2 
 

--------------------------------------------Methods for Comparing--------------------------------------------------

1)  hash < other_hash → true or false---- Returns true if hash is a proper subset of other_hash, false otherwise

	3.0.0 :064 > h={'A' => 65, 'B' => 66, 'C' => 67}
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :065 > g={'A' => 65}
	 => {"A"=>65} 
	3.0.0 :066 > h<g                  # h is not subset of g
	 => false 
	3.0.0 :067 > g<h				 # g is proper subset of h     
	 => true 
	3.0.0 :078 > i
	=> {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :083 > i<h
 	=> false 
	 
2)  hash <= other_hash → true or false--- Returns true if hash is a subset of other_hash, false otherwise:

	3.0.0 :076 > h
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :077 > g
	 => {"A"=>65} 
	3.0.0 :078 > i
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :079 > g<=h
	 => true 
	3.0.0 :080 > g<=i
	 => true 
	3.0.0 :081 > i<=h
	 => true 
	3.0.0 :082 > i<=h
	 => true 
	 
3)  hash == object → true or false -- Returns true if all of the following are true:

    object is a Hash object. hash and object have the same keys (regardless of order). For each key key, hash[key] == object[key].
	Otherwise, returns false.

	3.0.0 :086 > h
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :087 > g
	 => {"A"=>65} 
	3.0.0 :088 > i
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :089 > h==g
	 => false 
	3.0.0 :090 > h==i
	 => true 
	 
4)  hash > other_hash → true or false---Returns true if hash is a proper superset of other_hash, false otherwise:

	3.0.0 :091 > h
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :092 > g
	 => {"A"=>65} 
	3.0.0 :093 > i
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :094 > h>g
	 => true 
	3.0.0 :095 > h>i
	 => false 

5)  hash >= other_hash → true or false -- Returns true if hash is a superset of other_hash, false otherwise:
	3.0.0 :096 > h
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :097 > g
	 => {"A"=>65} 
	3.0.0 :098 > i
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :099 > h>=g
	 => true 
	3.0.0 :100 > h>=i
	 => true 
	 
-----------------------------------------Methods for Fetching-------------------------------------
1)   hash[key] → value-- Returns the value associated with the given key, if found: 
						If key is not found, returns a default value

	3.0.0 :103 > h
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :104 > h[:A]
	 => nil 
	3.0.0 :105 > h["A"]
	 => 65 
	3.0.0 :106 > h["C"]
	 => 67 
	3.0.0 :107 > h["D"]
	 => nil
	 
2) assoc() is an Hash class method which searches an element through the Hash.

--> assoc(key) →  new_array or nil ---- If the given key is found, returns a 2-element Array containing that key and its value:	 
	 				Returns nil if key key is not found.
	 
	 3.0.0 :011 > h
	 => {"A"=>65, "B"=>66} 
	3.0.0 :012 > h.assoc("A")               # return array ['key',value']
	 => ["A", 65] 
	3.0.0 :013 > h.assoc("B")
	 => ["B", 66] 
	3.0.0 :014 > h.assoc("C")
	 => nil
		 
3) dig() is a Hash class method which finds the nested value which is specified by the sequence of the key object by calling dig at each 			step.	
--->  dig(key, *identifiers) → object click to toggle source
		 Finds and returns the object in nested objects that is specified by key and identifiers. The nested objects may be instances of 			 various classes. 
		 
	3.0.0 :019 > g
 	=> {:A=>{:B=>{:C=>68}}} 	
 	3.0.0 :021 > g.dig(:A)
	 => {:B=>{:C=>68}} 
	3.0.0 :022 > g.dig(:A, :B)
	 => {:C=>68} 
	3.0.0 :023:> g.dig(:A, :B, :C)
 	=> 68 
	 
4) fetch() is a Hash class method which returns a value from the hash for the given key. With no other arguments, it will raise a 				KeyError exception. (Returns the value for the given key, if found. & returns default_value) 

-->	 fetch(key) → object 
	 3.0.0 :027 > h
	 => {"A"=>65, "B"=>66} 
	3.0.0 :028 > h.fetch("A")
	 => 65 
-->  fetch(key, default_value) → object
	 3.0.0 :031 > h
 	=> {"A"=>65, "B"=>66} 
	3.0.0 :032 > h.fetch("A", :default)
	 => 65 
	3.0.0 :033 > h.fetch("D", :default)
	 => :default 

-->	 fetch(key) {|key| ... } → object 
	3.0.0 :034 > h
 	=> {"A"=>65, "B"=>66} 
	3.0.0 :035 > h.fetch(:A) {|key| "No key #{key}"}
 	=> "No key A" 
	3.0.0 :036 > h.fetch("A") {|key| "No key #{key}"}
	 => 65 	
		 
5) fetch_values() is a Hash class method which returns array containing the values associated with the given keys. With no other 					  arguments, it will raise a KeyError exception. 	
		
		(Returns a new Array containing the values associated with the given keys *keys)
		
---> fetch_values(*keys) → new_array 
	 => {"A"=>65, "B"=>66} 
	3.0.0 :038 > h.fetch_values("A","B")
	 => [65, 66] 
	 
---> fetch_values(*keys) {|key| ... } → new_array 

	3.0.0 :039 > h.fetch_values("A","B") {|key| "No key #{key}"}
 	=> [65, 66] 
	3.0.0 :040 > h.fetch_values("C","B") {|key| "No key #{key}"}
	 => ["No key C", 66] 
	 
6) key() is a Hash class method which gives the key value corresponding to the value. If value doesn’t exist then return nil.

--> key(value) → key or nil --- Returns the key for the first-found entry with the given value & Returns nil if so such value is found.

	3.0.0 :041 > h
	 => {"A"=>65, "B"=>66} 
	3.0.0 :042 > h.key(66)
	 => "B" 
	3.0.0 :043 > h.key(69)
	 => nil 

7) keys() is a Hash class method which gives an array with all the keys present in the hash. 
	
-->  keys → new_array ----- Returns a new Array containing all keys in self:

	3.0.0 :044 > h.keys
	 => ["A", "B"] 

8) rassoc() is an Hash class method which searches an element through the Hash value.  (first-found entry) 

--> rassoc(value) → new_array or nil ----Returns a new 2-element Array consisting of the key and value of the first-found entry whose value is == to value

	 3.0.0 :045 > h
	 => {"A"=>65, "B"=>66} 
	3.0.0 :046 > h.rassoc(1)
	 => nil 
	3.0.0 :047 > h.rassoc(68)
	 => nil 
	3.0.0 :048 > h.rassoc(65)
	 => ["A", 65] 
	3.0.0 :049 > h.rassoc(66)
	 => ["B", 66] 
		 	 
9)  values → new_array---Returns a new Array containing all values in self:	 
	 => {"A"=>65, "B"=>66} 
	3.0.0 :051 > h.values
	 => [65, 66] 
	 
10)  values_at(*keys) → new_array --- Returns a new Array containing values for the given keys. The default values are returned for any 							keys that are not found:	 
	 
	 3.0.0 :052 > h.values_at("A")
	 => [65] 
	3.0.0 :053 > h.values_at("A","B")
	 => [65, 66] 
	 3.0.0 :054 > h.values_at("C","D")
	 => [nil, nil] 

-------------------------------------------------------Methods for Assigning----------------------------------------

1) hash[key] = value → value ---  Associates the given value with the given key; returns value. 

	3.0.0 :108 > h
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :109 > h['D'] = 68                       # add new key if key not exists in the end
	 => 68 
	3.0.0 :110 > h
	 => {"A"=>65, "B"=>66, "C"=>67, "D"=>68} 
	3.0.0 :111 > h
	 => {"A"=>65, "B"=>66, "C"=>67, "D"=>68} 
	3.0.0 :112 > h['D'] = 69						# replace value 							
	 => 69 
	3.0.0 :113 > h
	 => {"A"=>65, "B"=>66, "C"=>67, "D"=>69} 


2) store(key, value) -  Alias for hash[key] -- ------return value 

	3.0.0 :055 > h
	 => {"A"=>65, "B"=>66} 
	3.0.0 :056 > h.store("C",67)
	 => 67 
	3.0.0 :057 > h
	 => {"A"=>65, "B"=>66, "C"=>67} 

	3.0.0 :059 > h.store('A',68)         # replace value 	   
 	=> 68 
	3.0.0 :060 > h
	 => {"A"=>68, "B"=>66, "C"=>67} 

3) merge() is a Hash class method which combines two hash arrays and their content.

--->  merge → copy_of_self
	3.0.0 :062 > g=h.merge
	 => {"A"=>68, "B"=>66, "C"=>67} 
	3.0.0 :063 > g
	 => {"A"=>68, "B"=>66, "C"=>67}

--->  merge(*other_hashes) → new_hash
	3.0.0 :073 > h
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :074 > g
	 => {"D"=>68, "E"=>69} 
	3.0.0 :075 > i=h.merge(g)
	 => {"A"=>65, "B"=>66, "C"=>67, "D"=>68, "E"=>69}

--->  merge(*other_hashes) { |key, old_value, new_value| ... } → new_hash 	 

	3.0.0 :079 > g
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :080 > h
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :081 > i=h.merge(g) { |key, old_value, new_value| old_value + new_value }
	 => {"A"=>130, "B"=>132, "C"=>134} 

4) merge!() is a Hash class method which can add the content the given hash array to the other. Entries with duplicate keys are 			overwritten with the values from each other_hash successively if no block is given.

---> 	merge! → self 
	3.0.0 :082 > h
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :083 > g=h.merge!
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :084 > g
	 => {"A"=>65, "B"=>66, "C"=>67} 
	3.0.0 :085 > g["A"]=69                
	 => 69 
	3.0.0 :086 > h						  
	 => {"A"=>69, "B"=>66, "C"=>67} 


---> 	merge!(*other_hashes) → self
	3.0.0 :091 > h
	 => {"A"=>69, "B"=>66, "C"=>67} 
	3.0.0 :092 > g
	 => {"C"=>69} 
	3.0.0 :093 > h.merge!(g)
	 => {"A"=>69, "B"=>66, "C"=>69} 
	3.0.0 :094 > h
	 => {"A"=>69, "B"=>66, "C"=>69} 

---> 	merge!(*other_hashes) { |key, old_value, new_value| ... } → self 
	3.0.0 :097 > h
	 => {"A"=>69, "B"=>66, "C"=>69} 
	3.0.0 :098 > g
	 => {"C"=>67} 
	3.0.0 :099 > h.merge!(g) { |key, old_value, new_value | old_value + new_value }
	 => {"A"=>69, "B"=>66, "C"=>136} 
	3.0.0 :100 > h
	 => {"A"=>69, "B"=>66, "C"=>136} 


----> update() - Alias for merge! 

	3.0.0 :101 > h
	 => {"A"=>69, "B"=>66, "C"=>136} 
	3.0.0 :102 > g
	 => {"C"=>67} 
	3.0.0 :103 > h.update(g)
	 => {"A"=>69, "B"=>66, "C"=>67} 
	3.0.0 :104 > h
	 => {"A"=>69, "B"=>66, "C"=>67} 

5) replace() is a Hash class method which replaces the content of one hash with other. 

-->  replace(other_hash) → self -- Replaces the entire contents of self with the contents of other_hash; returns self:

	3.0.0 :108 > g
	 => {"C"=>67} 
	3.0.0 :109 > h
	 => {"A"=>69, "B"=>66, "C"=>67} 
	3.0.0 :110 > g.replace(h)
	 => {"A"=>69, "B"=>66, "C"=>67} 
	3.0.0 :111 > g
	 => {"A"=>69, "B"=>66, "C"=>67} 

--------------------------------------------------Methods for Deleting----------------------------------------------------

1)  clear → self-- Removes all hash entries; returns self.

	3.0.0 :112 > g
	 => {"A"=>69, "B"=>66, "C"=>67} 
	3.0.0 :113 > g.clear
	 => {} 
	3.0.0 :114 > g
	 => {} 


2) compact! → self or nil-- Returns self with all its nil-valued entries removed (in place): (Returns nil if no entries were removed)

	3.0.0 :117 > g={'A':25, 'B':nil, 'C': nil}
	 => {:A=>25, :B=>nil, :C=>nil} 
	3.0.0 :118 > g.compact!
	 => {:A=>25} 
	3.0.0 :119 > g
	 => {:A=>25}

3) delete() is an Hash class method which deletes the key-value pair and returns the value from hash whose key is equal to key.

-->  delete(key) → value or nil
	3.0.0 :122 > g
	 => {:A=>25} 
	3.0.0 :123:> g.delete(:A)
	 => 25 
	3.0.0 :124 > g
	 => {} 
	 
	 3.0.0 :125 > g.delete(:A)         # key is not found, returns nil
 	 => nil 

-->  delete(key) {|key| ... } → object 
	3.0.0 :126 > h
	 => {"A"=>69, "B"=>66, "C"=>67} 
	3.0.0 :127 > h.delete("A") { |key| "Key not found" }
	 => 69 
	3.0.0 :128 > h.delete("D") { |key| "Key not found" }
	 => "Key not found" 


4) delete_if() is a Hash class method which delete_if the key-value pair if the block condition is true 

---> delete_if {|key, value| ... } → self #If a block given, calls the block with each key-value pair; deletes each entry for which the 										 block returns a truthy value; returns self: 
		3.0.0 :133 > h
		 => {:a=>97, :b=>98, :c=>97} 
		3.0.0 :134 > h.delete_if { |key, value| value == 97 }
		 => {:b=>98} 
		3.0.0 :135 > h
		 => {:b=>98} 

---> delete_if → new_enumerator
If no block given, returns a new Enumerator:
	3.0.0 :136 > h.delete_if
 	=> #<Enumerator: {:b=>98}:delete_if> 

5) select() is a Hash class method which finds the array from the hash based on the block condition. 

--->  select! {|key, value| ... } → self or nil 
	Returns self, whose entries are those for which the block returns a truthy value. Returns nil if no entries were removed

	3.0.0 :146 >  h={'a': 97, 'b': 98, 'c': 97}
	 => {:a=>97, :b=>98, :c=>97} 
	3.0.0 :147 > h.select! { |key, value| value>97 }
	 => {:b=>98} 
	3.0.0 :148 > h
	 => {:b=>98} 

--->  select! → new_enumerator --- Returns a new Enumerator if no block given

	3.0.0 :138 > h
	 => {:b=>98} 
	3.0.0 :139 > h.select!
	 => #<Enumerator: {:b=>98}:select!> 

-----> filter! -  alias for select! 
	3.0.0 :149 >  h={'a': 97, 'b': 98, 'c': 97}
	 => {:a=>97, :b=>98, :c=>97} 
	3.0.0 :150 > h.filter! { |key, value| value>97 }
	 => {:b=>98} 
	3.0.0 :151 > h
	 => {:b=>98} 
	
6) keep_if() is a Hash class method which only keeps those key value pair that follows the block condition.

--->  keep_if {|key, value| ... } → self---Calls the block for each key-value pair; retains the entry if the block returns a truthy 									 value; otherwise deletes the entry; returns self
		3.0.0 :154 >  h={'a': 97, 'b': 98, 'c': 97}
		 => {:a=>97, :b=>98, :c=>97} 
		3.0.0 :155 > h.keep_if { |key, value| value<98 }
		 => {:a=>97, :c=>97} 
		3.0.0 :156 > h
		 => {:a=>97, :c=>97} 

--->  keep_if → new_enumerator -- Returns a new Enumerator if no block given

	3.0.0 :157 > h.keep_if
	 => #<Enumerator: {:a=>97, :c=>97}:keep_if> 
	 
7) reject!() is a Hash class method which checks whether any changes are made in the hash array or not

---> reject! {|key, value| ... } → self or nil -Returns self, whose remaining entries are those for which the block returns false or nil:
	3.0.0 :158 >  h={'a': 97, 'b': 98, 'c': 97}
	 => {:a=>97, :b=>98, :c=>97} 
	3.0.0 :159 > h.reject! { |key, value| value<98 }
	 => {:b=>98} 
	3.0.0 :160 > h
	 => {:b=>98}

---> reject! → new_enumerator  
	3.0.0 :161 > h.reject!
	 => #<Enumerator: {:b=>98}:reject!> 

8)shift() is a Hash class method which removes a key-value pair from hash and then it returns these value as two-item array 

---> shift → [key, value] or default_value - Removes the first hash entry (see Entry Order); returns a 2-element Array containing the 					removed key and value:

	3.0.0 :164 >  h={'a': 97, 'b': 98, 'c': 97}   # changes in self
	 => {:a=>97, :b=>98, :c=>97} 
	3.0.0 :165 > h.shift
	 => [:a, 97]                  # ['key', value'] array 
	3.0.0 :166 > h
	 => {:b=>98, :c=>97} 


---------------These methods return a copy of self with some entries removed:-----------------------

1)  compact → new_hash -- Returns a copy of self with all nil-valued entries removed

	3.0.0 :170 >  h={'a': 97, 'b': 98, 'c': nil}
	 => {:a=>97, :b=>98, :c=>nil} 
	3.0.0 :171 > h.compact
	 => {:a=>97, :b=>98} 
	3.0.0 :172 > h
	 => {:a=>97, :b=>98, :c=>nil} 


2)  except(*keys) → a_hash -- Returns a new Hash excluding entries for the given keys
					Any given keys that are not found are ignored.
	3.0.0 :178 > h
	 => {:a=>97, :b=>98, :c=>nil} 
	3.0.0 :179 > g=h.except(:a)
	 => {:b=>98, :c=>nil} 
	 
3) select() is a Hash class method which finds the array from the hash based on the block condition. 

---> select {|key, value| ... } → new_hash- Returns a new Hash object whose entries are those for which the block returns a truthy value:

	3.0.0 :183 > h
	 => {:a=>97, :b=>98} 
	3.0.0 :184 > h.select { |key, value| value>97 }
	 => {:b=>98} 
	3.0.0 :185 > h
	 => {:a=>97, :b=>98} 
	 
-->	select → new_enumerator 
	3.0.0 :186 > h.select
	 => #<Enumerator: {:a=>97, :b=>98}:select> 


-----> filter -  alias for select 

	3.0.0 :149 >  h={'a': 97, 'b': 98, 'c': 97}
	 => {:a=>97, :b=>98, :c=>97} 
	3.0.0 :150 > h.filter { |key, value| value>97 }
	 => {:b=>98} 
	
4) reject() is a Hash class method which returns a new hash which consists of entries for which the block returns false. 
--> reject {|key, value| ... } → new_hash 
	Returns a new Hash object whose entries are all those from self for which the block returns false or nil:
	3.0.0 :187 > h
	 => {:a=>97, :b=>98} 
	3.0.0 :188 > h.reject { |key, value| value>97}
	 => {:a=>97} 
	3.0.0 :189 > h
	 => {:a=>97, :b=>98} 

--> reject → new_enumerator 
	3.0.0 :190 > h.reject
	 => #<Enumerator: {:a=>97, :b=>98}:reject> 


5)slice(*keys) → new_hash -- Returns a new Hash object containing the entries for the given keys:

	3.0.0 :191 > h
	 => {:a=>97, :b=>98} 
	3.0.0 :192 > h.slice(:a,:d)
	 => {:a=>97} 
	3.0.0 :193 > h
	 => {:a=>97, :b=>98} 

--------------------------------------------------------Methods for Iterating-------------------------------------------------

1) each() and each_pair() is a Hash class method which finds the nested value which calls block once for each key in hash by passing the key-value pair as parameters.

--> each {|key, value| ... } → self
	3.0.0 :195 >  h={'a': 97, 'b': 98, 'c': nil}
	 => {:a=>97, :b=>98, :c=>nil} 
	3.0.0 :196 > h.each {|key, value| puts "#{key} : #{value}" }
	a : 97
	b : 98
	c : 
	
--> each_pair {|key, value| ... } → self
	3.0.0 :197 > h.each_pair {|key, value| puts "#{key} : #{value}" }
	a : 97
	b : 98
	c : 
	 => {:a=>97, :b=>98, :c=>nil}

--> each → new_enumerator
--> each_pair → new_enumerator 

3.0.0 :198 > h.each
 => #<Enumerator: {:a=>97, :b=>98, :c=>nil}:each> 
3.0.0 :199 > h.each_pair
 => #<Enumerator: {:a=>97, :b=>98, :c=>nil}:each_pair> 
3.0.0 :200 > 

2) each_key() is a Hash class method which finds the nested value which calls block once for each_key key in hash by passing the key pair 					as parameters. 

---> each_value {|value| ... } → self 
	Calls the given block with each value; returns self: 
	3.0.0 :201 > h.each_key {|value| puts "#{value}" }
	a
	b
	c
	 => {:a=>97, :b=>98, :c=>nil} 
	 
---> each_value → new_enumerator 

3)each_value {|value| ... } → self - Calls the given block with each value; returns self

each_value → new_enumerator  -- Returns a new Enumerator if no block given 

	3.0.0 :207 > h.each_value {|value| puts "#{value}" }
	97
	98

	 => {:a=>97, :b=>98, :c=>nil} 

	
--------------------------------------------Methods for Converting--------------------------------------------
1)  inspect → new_string -- Returns a new String containing the hash entries

	3.0.0 :209 > h.inspect
	 => "{:a=>97, :b=>98, :c=>nil}" 


2)  to_s() - Alias for: inspect 

	3.0.0 :212 > h.to_s()
	 => "{:a=>97, :b=>98, :c=>nil}" 


3)  to_a → new_array -- Returns a new Array of 2-element Array objects; each nested Array contains a key-value pair from self:

	3.0.0 :213 > h
	 => {:a=>97, :b=>98, :c=>nil} 
	3.0.0 :214 > h.to_a
	 => [[:a, 97], [:b, 98], [:c, nil]] 

4)  to_h → self or new_hash
to_h {|key, value| ... } → new_hash

For an instance of Hash, returns self.

For a subclass of Hash, returns a new Hash containing the content of self.

When a block is given, returns a new Hash object whose content is based on the block; the block should return a 2-element Array object specifying the key-value pair to be included in the returned Array:

	3.0.0 :215 > h
	 => {:a=>97, :b=>98, :c=>nil} 
	3.0.0 :216 > h1=h.to_h {|key, value| [value, key]}
	 => {97=>:a, 98=>:b, nil=>:c} 
	3.0.0 :217 > h1
	 => {97=>:a, 98=>:b, nil=>:c} 



5) to_hash() is a Hash class method which returns the self – hash representation of the hash
 
to_hash → self -- Returns self.

3.0.0 :218 > h
 => {:a=>97, :b=>98, :c=>nil} 
3.0.0 :219 > h.to_hash
 => {:a=>97, :b=>98, :c=>nil} 


6)to_proc → proc -- Returns a Proc object that maps a key to its value.

	3.0.0 :223 > h
	 => {:a=>97, :b=>98, :c=>nil} 
	3.0.0 :224 > proc=h.to_proc
	 => #<Proc:0x00005595243ac7a8 (lambda)> 
	3.0.0 :225 > proc.class
	 => Proc 
	3.0.0 :226 > proc.call(:a)
	 => 97 
	3.0.0 :227:> proc.call(:b)
	 => 98 
	3.0.0 :228:> proc.call(:c)
	 => nil 













