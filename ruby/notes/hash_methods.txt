-------------------------------------------------------HASH---------------------------------------------------------------------------

A Hash is a collection of key-value pairs like this: "employee" = > "salary". It is similar to an Array, except that indexing is done via arbitrary keys of any object type, not an integer index.

---------------------------------------------------Hash Data Syntax------------------------------------------------------

older syntax-- 
	h= {:A=>65, :B=>66, :C=>67} 


New Syntax: -
-->	3.0.0 :007 > h={A: 65, B: 66, C: 67}
 	=> {:A=>65, :B=>66, :C=>67} 

--> 3.0.0 :009 > h={'A': 65, 'B': 66, 'C': 67}
 	=> {:A=>65, :B=>66, :C=>67} 
 
 -------------------------------------------------Creating a Hash-------------------------------------------------------------
 3 ways - 
    
    i) Method Hash.new
   ii) Method Hash[]
  iii) Literal form: {}.

1) Create an empty Hash--
	
 	3.0.0 :010 > h=Hash.new
	 => {} 
	3.0.0 :011 > h=Hash[]
	 => {} 
	3.0.0 :012 > h={}
	 => {} 
	 

---------------------------------------------------Methods for Creating a Hash----------------------------------------------------------
1) Public Class Methods ------------->

1) Hash[] - Returns a new Hash object populated with the given objects, if any. See ::new. With no argument, returns a new empty Hash.
			When the single given argument is a Hash, returns a new Hash populated with the entries from the given Hash.

-->	Hash[] → new_empty_hash 
	3.0.0 :023 > h=Hash[]
	 => {} 

-->	Hash[hash] → new_hash

	3.0.0 :024 > h = {"A"=>65, "B"=>66, "C"=>76}
	 => {"A"=>65, "B"=>66, "C"=>76} 
	3.0.0 :025 > hash1 = Hash(h)
	 => {"A"=>65, "B"=>66, "C"=>76} 
	3.0.0 :026 > hash1
	 => {"A"=>65, "B"=>66, "C"=>76} 

-->	Hash[ [*2_element_arrays] ] → new_hash
	3.0.0 :032 > a
	 => [["A", 65], ["B", 66]] 
	3.0.0 :033 > h=Hash[a]
	 => {"A"=>65, "B"=>66} 

-->	Hash[*objects] → new_hash 
	3.0.0 :034 > h=Hash['A', 65, 'B', 66]
 	=> {"A"=>65, "B"=>66} 
 	
	3.0.0 :036 > h=Hash[1, 2, 3, 4]   # cretae hash for even arguments only
	 => {1=>2, 3=>4} 

	h=Hash[1, 2, 3, 4, 5]    #Error - (odd number of arguments for Hash)

	
2) new() - Returns a new empty Hash object. The initial default value and initial default proc for the new hash depend on which form above 				was used. 

--> new(default_value = nil) → new_hash
e.g.	3.0.0 :047 > h=Hash.new
		 => {} 
		3.0.0 :048 > h.default
		 => nil 
		3.0.0 :049 > h.default_proc
		 => nil 
e.g.	3.0.0 :050 > h=Hash.new("Default values")
		 => {} 
		3.0.0 :051 > h.default
		 => "Default values" 
		3.0.0 :052 > h.default_proc
		 => nil 	
		 
-->	new {|hash, key| ... } → new_hash 


3) try_convert(obj) → obj, new_hash, or nil 

If obj is a Hash object, returns obj.

Otherwise if obj responds to :to_hash, calls obj.to_hash and returns the result.

Returns nil if obj does not respond to :to_hash

		3.0.0 :054 > h=Hash.try_convert({'A' => 65})
		 => {"A"=>65} 
		3.0.0 :055 > h
		 => {"A"=>65} 

---------------------------------------Methods for Setting Hash State----------------------------------------------
II) Public Instance Methods----------------------->

1) compare_by_identity → self - Sets self to consider only identity in comparing keys; two keys are considered the same only if they are 									the same object; returns self.

	3.0.0 :134 > h={'A' => 65, 'B' => 66}
	 => {"A"=>65, "B"=>66} 
	3.0.0 :135 > h['A']
	 => 65 
	3.0.0 :136 > h['B']
	 => 66 
	3.0.0 :137 > h.compare_by_identity?
	 => false 
	3.0.0 :138 > h.compare_by_identity          # by using this insert duplicate keys 
	 => {"A"=>65, "B"=>66} 
	3.0.0 :139 > h['A']
	 => nil 
	3.0.0 :140 > h['A'] = 69
	 => 69 
	3.0.0 :141 > h
	 => {"A"=>65, "B"=>66, "A"=>69} 
	3.0.0 :142 > h.compare_by_identity?
	 => true 
	3.0.0 :143 > h['A']=65
	 => 65 
	3.0.0 :144 > h
	 => {"A"=>65, "B"=>66, "A"=>69, "A"=>65} 
	 
2)  compare_by_identity? → true or false-- Returns true if compare_by_identity has been called, false otherwise.
	 
	 3.0.0 :142 > h.compare_by_identity?      # return true bcz called comprae_by_identity 
	 => true 

3)  default = value → object --> Sets the default value to value; returns value:

	3.0.0 :145 > h
	 => {"A"=>65, "B"=>66, "A"=>69, "A"=>65} 
	3.0.0 :146 > h.default
	 => nil 
	3.0.0 :147 > h.default= 'default_value'
	 => "default_value" 
	3.0.0 :148 > h.default
	 => "default_value" 

4)  default_proc = proc → proc -- Sets the default proc for self to proc	

	3.0.0 :149 > h.default_proc
	 => nil 
	3.0.0 :150 > h.default_proc = proc { |hash,key| "default value for #{key}"}
	 => #<Proc:0x000055f088918bc8 (irb):150> 
	3.0.0 :151 > h.default_proc
	 => #<Proc:0x000055f088918bc8 (irb):150> 


5) rehash → self - Rebuilds the hash table by recomputing the hash index for each key; returns self. 
	3.0.0 :154 > h.rehash
	 => {"A"=>65, "B"=>66, "A"=>69, "A"=>65} 


-----------------------------------------------Methods for Querying-----------------------------------------------

1) any? () - Returns true if any element satisfies a given criterion; false otherwise.
 			 With no argument and no block, returns true if self is non-empty; false if empty. 

	any? → true or false 
	3.0.0 :114 > h.any?       # returns true if self is non-empty; false if empty    
	 => true 
		
	any?(object) → true or false
	3.0.0 :113 > h
	 => {"A"=>65, "B"=>66, "C"=>67, "D"=>69} 
	3.0.0 :114 > h.any?
	 => true 
	3.0.0 :115 > h.any?(['A', 65])
	 => true 
	3.0.0 :116 > h.any?(['A', 69])
	 => false 

	any? {|key, value| ... } → true or false 

	3.0.0 :007 > h
	 => {"A"=>65, "B"=>66} 
	3.0.0 :008 > h.any? {|key, value| value>65 }
	 => true 
	3.0.0 :009 > h.any? {|key, value| value>70 }
	 => false 
	3.0.0 :010 > h.any? {|key, value| value>60 }
	 => true 

2) default  -  Returns the default value for the given key. The returned value will be determined either by the default proc or by the 					default value 

--> default → object
	3.0.0 :016 > h
	 => {"A"=>65, "B"=>66} 
	3.0.0 :017 > h.default
	 => nil 

--> default(key) → object 
	3.0.0 :018 > g = Hash.new { |hash, key| hash[key] = "No key #{key}"}
	 => {} 

	3.0.0 :020 > g['A']
	 => "No key A" 
	3.0.0 :021 > g.default('A')
	 => "No key A" 

3)  eql? object → true or false
	Returns true if all of the following are true:
    object is a Hash object.
    hash and object have the same keys (regardless of order).
    For each key key, h[key] eql? object[key].   # value 

	Otherwise, returns false.

		3.0.0 :025 > h.eql?g
		 => false 
		3.0.0 :026 > g['B']
		 => "No key B" 
		3.0.0 :027 > h
		 => {"A"=>65, "B"=>66} 
		3.0.0 :028 > g
		 => {"A"=>"No key A", "B"=>"No key B"} 
		3.0.0 :029 > h.eql?g
		 => false

	3.0.0 :002 > h={'A' => 65, 'B' => 66}
	 => {"A"=>65, "B"=>66} 
	3.0.0 :003 > g={'A' => 65, 'B' => 66}
	 => {"A"=>65, "B"=>66} 
	3.0.0 :004 > h.eql?g
	 => true 

4)  hash → an_integer -- Returns the Integer hash-code for the hash.
	Two Hash objects have the same hash-code if their content is the same (regardless or order):
	
	3.0.0 :005 > h.hash
	 => -1033875940828079217 
	3.0.0 :006 > g.hash
	 => -1033875940828079217 
	 
5)  has_value?() is a Hash class method which checks whether the given value is present in hash.(Method value? is an alias for 						#has_value?.) 
	 Returns true if value is a value in self, otherwise false.
	 
---> has_value?(value) → true or false  
	 
	3.0.0 :008 > h
	 => {"A"=>65, "B"=>66} 
	3.0.0 :009 > h.has_value?(65)
	 => true 
	3.0.0 :010 > h.has_value?(69)
 	=> false 
	
---> value?(value) → true or false	
	3.0.0 :011 > h.value?(69)            # value()  is an alias for has_value? 
 	=> false  
	3.0.0 :012 > h.value?(65)
	 => true 

	
	 
6) include?() is a Hash class method which checks whether the given key is present in hash.
	 
-->	 include?(key) → true or false - Returns true if key is a key in self, otherwise false.
	 3.0.0 :013 > h.include?('A')
	 => true 
	3.0.0 :014 > h.include?('D')
	 => false 
	 
---> has_key? () -----------------------------Alias for include?()	
	3.0.0 :015 > h.has_key?('D')
	 => false 
	3.0.0 :016 > h.has_key?('A')
 	=> true 
 
--> member? () -----------------------------Alias for include?()		 
	 
	3.0.0 :004 > h
	 => {"A"=>65, "B"=>66} 
	3.0.0 :005 > h.member?('A')
	 => true 
	3.0.0 :006 > h.member?('D')
	 => false  
	 
--> key? () -----------------------------Alias for include?()		 
	 
	3.0.0 :007 > h.key?('A')
 	=> true 
	3.0.0 :008 > h.key?('D')
	 => false 
	 
7) length() and size() - is a Hash class method which gives number of key-value pairs in the hash.	 
	 
--->  length → integer---	Returns the count of entries in self:

	3.0.0 :009 > h.length()
 	=> 2  
	 
---> size → integer
	3.0.0 :010 > h.size
	 => 2 
 

	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
