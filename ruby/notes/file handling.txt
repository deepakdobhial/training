------------------------------------------------File handling--------------------------------
It is a way of processing a file such as creating a new file, reading content in a file, writing content to a file, appending content to a file, renaming the file and deleting the file


 # Class File:

 --   Inherits from class IO, in particular, methods for creating, reading, and writing files
 --   Includes module FileTest. which provides dozens of additional methods.
   
# Common modes for File Handling

	“r” : Read-only mode for a file.
	“w” : Write-only mode for a file.
	“a” : Write-only mode, if file exists it will append the data otherwise a new file will be created.
	“r+” : Read-Write mode for a file.
	“w+” : Read-Write mode for a file.
	“a+” : Read and Write mode, if file exists it will append the data otherwise a new file will be created.


-----------------------------------------Creating methods ---------------------------------------------------

 1) file.new() -  create a new File using File.new() method for reading, writing or for both, according to the mode string. we can use 					  fileobject.close() method to close that file.
 
There are two methods to open a file in Ruby:

----- File.new method : Using this method a new file can be created for reading, writing or both.
      3.0.0 :020 > fileobj = File.new('sample.txt', 'w+')
 => #<File:sample.txt> 

----  File.open method : Using this method a new file object is created. That file object is assigned to a file. 

	  3.0.0 :022 > File.open('sample.txt', 'w+') do |file|
      3.0.0 :023 > end


Difference between both the methods is that File.open method can be associated with a block while File.new method can't.
			   
						   
2) link(old_name, new_name) → 0 - Creates a new name for an existing file using a hard link. Will not overwrite new_name if it already 									  exists (raising a subclass of SystemCallError).

	3.0.0 :024 > File.link('sample.txt', 'sample1.txt')   # a new file created 
 	=> 0 

3)  mkfifo(file_name, mode=0666) => 0   (create pipe file)
	Creates a FIFO special file with name file_name. mode specifies the FIFO's permissions. It is modified by the process's umask in the 	 usual way: the permissions of the created file are (mode & ~umask).
	
	3.0.0 :028 > File.mkfifo('sample3.txt', mode=0666)
 	=> 0

4)  symlink() → Creates a symbolic link for the given file path. 
	symlink(old_name, new_name) → 0
	
	(a symbolic link is a term for any file that contains a reference to another file or directory in the form of an absolute or relative path and that affects pathname resolution.)
	
	

-------------------------------------------Querying Methods ---------------------------------------------
Paths --- 

1) ::absolute_path() -- Returns the absolute file path for the given path.

absolute_path(file_name [, dir_string] ) → abs_file_name- Converts a pathname to an absolute pathname. Relative paths are referenced from the current working directory of the process unless dir_string is given, in which case it will be used as the starting point. If the given pathname starts with a “~'' it is NOT expanded, it is treated as a normal directory name.

  3.0.0 :031 > File.absolute_path('sample.txt')
  => "/home/beryl/sample.txt" 
  
2)  absolute_path?(file_name) → true or false - Returns true if file_name is an absolute path, and false otherwise.
	
	3.0.0 :032?> File.absolute_path? ('sample.txt')
	 => false 
	3.0.0 :033 > File.absolute_path? ('/home/beryl/sample.txt')
	 => true 

3) ::basename - Returns the last component of the given file path.

---- basename(file_name [, suffix] ) → base_name  
	  3.0.0 :034 > File.basename("/home/beryl/sample.txt")
 		=> "sample.txt" 
 		
 	  3.0.0 :036 > File.basename("/home/beryl/sample.txt", ".txt")
	 => "sample" 
	3.0.0 :037 > File.basename("/home/beryl/sample.txt", ".*")
 	=> "sample" 
 	
4) ::dirname - Returns all but the last component of the given file path. 
   
--->  dirname(file_name, level = 1) → dir_name - Returns all components of the filename given in file_name except the last one (after 
                                          first stripping trailing separators)
                                          
 3.0.0 :049 > File.dirname("/home/beryl/sample.txt")
 => "/home/beryl" 
                          
5)::expand_path -  Returns the absolute file path for the given path, expanding ~ for a home directory.

--- expand_path(file_name [, dir_string] ) → abs_file_name

	3.0.0 :055 > File.expand_path("~/home")
	 => "/home/beryl/home" 
	3.0.0 :056 > File.expand_path("~")
	 => "/home/beryl" 
	3.0.0 :057 > File.expand_path("~/traning")
	 => "/home/beryl/traning" 
	3.0.0 :058 > File.expand_path("traning", "/home/beryl")
	 => "/home/beryl/traning" 

6) ::extname - Returns the file extension for the given file path.

--- extname(path) → string--Returns the extension (the portion of file name in path starting from the last period).

3.0.0 :061 > File.extname("/home/beryl/sample")
 => "" 
3.0.0 :062 > File.extname("/home/beryl/sample.txt")
 => ".txt" 

7) ::fnmatch? (aliased as ::fnmatch) --Returns whether the given file path matches the given pattern.

--- fnmatch( pattern, path, [flags] ) → (true or false)
--- fnmatch?( pattern, path, [flags] ) → (true or false)
 
	3.0.0 :064 > File.fnmatch('c?t',     'cat') 
	 => true 
	3.0.0 :065 > File.fnmatch('cat',     'cat') 
	 => true 
	3.0.0 :066 > File.fnmatch('cat',     'category') 
	 => false 
	3.0.0 :067 > File.fnmatch('c??t',     'cat') 
	 => false 
	3.0.0 :068 > File.fnmatch('c*',     'cat') 
	 => true 

8) ::join --- Joins path components into a single path string.

	3.0.0 :072 > File.join("home", "beryl", "sample.txt")
	 => "home/beryl/sample.txt" 

9) ::path -- Returns the string representation of the given path.

	3.0.0 :073 > File.path("home/beryl/sample.txt")
	 => "home/beryl/sample.txt" 

10) ::readlink - Returns the path to the file at the given symbolic link.

-- readlink(link_name) → file_name -- Returns the name of the file referenced by the given link. Not available on all platforms.

3.0.0 :077 > File.readlink("sample5.txt")
 => "sample.txt" 

11) ::realdirpath --  Returns the real path for the given file path, where the last component need not exist.

-- realdirpath(pathname [, dir_string]) → real_pathname 

Returns the real (absolute) pathname of pathname in the actual filesystem. The real pathname doesn't contain symlinks or useless dots.

If dir_string is given, it is used as a base directory for interpreting relative pathname instead of the current directory.


	3.0.0 :082 > File.realdirpath('/home/beryl/sample.txt')
 	=> "/home/beryl/sample.txt" 

12) ::split -- Returns an array of two strings: the directory name and basename of the file at the given path. 
 
--> split(file_name) → array -- Splits the given string into a directory and a file component and returns them in a two-element array

	3.0.0 :084 > File.split('/home/beryl/sample.txt')
	 => ["/home/beryl", "sample.txt"] 

13) path (aliased as to_path) --   Returns the string representation of the given path.

---- path → filename
---- to_path → filename

Returns the pathname used to create file as a string. Does not normalize the name.

The pathname may not point to the file corresponding to file. For instance, the pathname becomes void when the file has been moved or deleted.

	3.0.0 :085 > fileobj = File.new('sample.txt').path
 	=> "sample.txt"


------------------------------------------------times Method--------------------------------------------------------
1) ::atime --    Returns a Time for the most recent access to the given file.

---atime(file_name) → time -- Returns the last access time for the named file as a Time object.  file_name can be an IO object.

3.0.0 :086 > File.atime('sample.txt')
 => 2022-01-19 13:04:54.875412587 +0530

2) ::birthtime --  Returns a Time for the creation of the given file.

	3.0.0 :087 > File.birthtime('sample.txt')
	 => 2022-01-19 12:40:06.642876823 +0530 
	 
3) ::ctime -- Returns a Time for the metadata change of the given file.
 --ctime(file_name) → time
 Returns the change time for the named file (the time at which directory information about the file was changed, not the file itself).

	3.0.0 :088 > File.ctime('sample.txt')
 	=> 2022-01-19 12:46:58.086595859 +0530 

4) ::mtime --  Returns a Time for the most recent data modification to the content of the given file.
 mtime(file_name) → time -- Returns the modification time for the named file as a Time object.
 
3.0.0 :090 > File.mtime('sample.txt')
 => 2022-01-19 14:57:58.685024538 +0530 

5)atime → time -- Returns the last access time (a Time object) for file, or epoch if file has not been accessed

3.0.0 :093 > File.new('sample.txt').atime
 => 2022-01-19 13:04:54.875412587 +0530

6)  birthtime → time -Returns the birth time for file.
	3.0.0 :096 > File.new('sample.txt').birthtime
  => 2022-01-19 12:40:06.642876823 +0530 

7)  ctime → time --Returns the change time for file (that is, the time directory information about the file was changed, not the file itself).

3.0.0 :098 > File.new('sample.txt').ctime
 => 2022-01-19 14:57:58.685024538 +0530 

8) mtime → time -- Returns the modification time for file.
	3.0.0 :099 > File.new('sample.txt').mtime
	 => 2022-01-19 14:57:58.685024538 +0530 

---------------------------------------------Types Methods ----------------------------------------

1) ::blockdev?   Returns whether the file at the given path is a block device.
  blockdev?(file_name) → true or false

Returns true if the named file is a block device.
3.0.0 :105 > File.blockdev?('sampe9.txt')
 => false 

2) chardev?(file_name) → true or false -- Returns true if the named file is a character device.

3.0.0 :106 > File.chardev?('sampe9.txt')
 => false 

3) ::directory? -- Returns whether the file at the given path is a diretory.

 directory?(file_name) → true or false
Returns true if the named file is a directory, or a symlink that points at a directory, and false otherwise.

3.0.0 :112 > File.directory?('.')
 => true 

4) ::executable? -- Returns whether the file at the given path is executable by the effective user and group of the current process.

3.0.0 :116 > File.executable?('sample.txt')
 => false 

5) ::executable_real?--    Returns whether the file at the given path is executable by the real user and group of the current process.

executable_real?(file_name) → true or false

3.0.0 :120 > File.executable_real?('home/download/slack-desktop-4.23.0-amd64.de
b')
 => false 

6) exist?(file_name) → true or false -- Return true if the named file exists.

3.0.0 :121 > File.exist?('sample')
 => false 
3.0.0 :122 > File.exist?('sample.txt')
 => true 
 
7)  file?(file) → true or false -- Returns true if the named file exists and is a regular file.
If the file argument is a symbolic link, it will resolve the symbolic link and use the file referenced by the link.

3.0.0 :124 > File.file?('sample5.txt')
 => true 
3.0.0 :125 > File.file?('sample5.txt')
 => true 
3.0.0 :126 > File.file?('sample10.txt')
 => false 
 
8)  ftype(file_name) → string 
Identifies the type of the named file; the return string is one of “file'', “directory'', “characterSpecial'', “blockSpecial'', “fifo'', “link'', “socket'', or “unknown''.

3.0.0 :128 > File.ftype('sample5.txt')
 => "link" 
3.0.0 :129 > File.ftype('sample.txt')
 => "file" 
3.0.0 :130 > File.ftype('sample3.txt')
 => "fifo" 
 
9)  grpowned?(file_name) → true or false -- Returns true if the named file exists and the effective group id of the calling process is the owner of the file.

3.0.0 :133 > File.grpowned?('sample9.txt')
 => true 
3.0.0 :134 > File.grpowned?('sample10.txt')
 => false 

10)  identical?(file_1, file_2) → true or false -- Returns true if the named files are identical. Returns whether the files at two given paths are identical.

3.0.0 :139 > File.identical?('sample5.txt', 'sample.txt')
 => true 
 
11)  lstat(file_name) → stat--- Same as File::stat, but does not follow the last symbolic link. Instead, reports on the link itself.

3.0.0 :141 > File.lstat('sample5.txt')
 => #<File::Stat dev=0x805, ino=19043105, mode=0120777, nlink=1, uid=1000, gid=1000, rdev=0x0, size=10, blksize=4096, blocks=0, atime=2022-01-19 13:04:48.710822365 +0530, mtime=2022-01-19 13:04:48.70682198 +0530, ctime=2022-01-19 13:04:48.70682198 +0530> 


-------3.0.0 :144 > File.lstat('sample5.txt').size
 		=> 10 

12)  owned?(file_name) → true or false -- Returns true if the named file exists and the effective used id of the calling process is the owner of the file.

3.0.0 :145 > File.owned?('sample5.txt')
 => true 
3.0.0 :146 > File.owned?('sample.txt')
 => true 
3.0.0 :147 > File.owned?('sample10.txt')
 => false 

13)  pipe?(file_name) → true or false -- Returns true if the named file is a pipe.

3.0.0 :148 > File.pipe?('sample5.txt')
 => false 
3.0.0 :149 > File.pipe?('sample3.txt')
 => true 

14) readable?(file_name) → true or false -- Returns true if the named file is readable by the effective user and group id of this process

3.0.0 :152 > File.readable?('sample3.txt')
 => true 
3.0.0 :153 > File.readable?('sample5.txt')
 => true 
 
15)  readable_real?(file_name) → true or false --  Returns true if the named file is readable by the real user and group id of this process.
3.0.0 :154 > File.readable_real?('sample5.txt')
 => true 
 
16)  setgid?(file_name) → true or false -    (set group ID)

meaning - The Unix access rights flags setuid and setgid (short for "set user ID" and "set group ID") allow users to run an executable with the file system permissions of the executable's owner or group respectively and to change behaviour in directories

Returns true if the named file has the setgid bit set. 

3.0.0 :155 > File.setgid?('sample5.txt')
 => false 
 
17)  setuid?(file_name) → true or false -- Returns true if the named file has the setuid bit set.

18)  socket?(file_name) → true or false -- Returns true if the named file is a socket.
A unit configuration file whose name ends in " . socket " encodes information about an IPC or network socket or a file system FIFO controlled and supervised by systemd, for socket-based activation.

19) stat(file_name) → stat -- Returns a File::Stat object for the named file
3.0.0 :169 > File.stat('sample.socket')
 => #<File::Stat dev=0x805, ino=19014473, mode=0100664, nlink=1, uid=1000, gid=1000, rdev=0x0, size=0, blksize=4096, blocks=0, atime=2022-01-19 15:53:30.499762546 +0530, mtime=2022-01-19 15:53:30.499762546 +0530, ctime=2022-01-19 15:53:30.499762546 +0530> 

20) a sticky bit -------is a permission bit which is set on a file or folder, thereby permitting only the owner or root user of the file 							or folder to modify, rename or delete the concerned directory or file. No other user would be permitted to have 						these privileges on a file which has a sticky bit.

sticky?(file_name) → true or false

3.0.0 :170 > File.sticky?('sample.socket')
 => false
 
21)  symlink?(file_name) → true or false -- Returns true if the named file is a symbolic link.
	3.0.0 :171 > File.symlink?('sample5.txt')
	 => true 

22)  umask() → integer    (user mask value)   #Default File Permissions
	umask(integer) → integer -- Returns the current umask value for this proces
	
	
23) world_readable?(file_name) → integer or nil - 
If file_name is readable by others, returns an integer representing the file permission bits of file_name. Returns nil otherwise.

3.0.0 :178 > File.world_readable?('sample.txt')
 => 436  
 
24)  writable?(file_name) → true or false  -- Returns true if the named file is writable by the effective user and group id of this process
	
3.0.0 :179 > File.writable?('sample.txt')
 => true 
 
25)  writable_real?(file_name) → true or false

Returns true if the named file is writable by the real user and group id of this process.	
	
	3.0.0 :180 > File.writable_real?('sample.txt')
 => true 
	
	
----------------------------------------------------Contents Methods -----------------	
1) ::empty? (aliased as ::zero?) ---  Returns whether the file at the given path exists and is empty.

zero?(file_name) → true or false --- 

3.0.0 :183 > File.zero?('sample11.txt')
 => false 
3.0.0 :184 > File.zero?('sample.socket')
 => true 

2)  size(file_name) → integer -- Returns the size of file_name.	

	3.0.0 :003 > File.size('sample.txt')
	 => 6 
	3.0.0 :004 > File.size('sample.socket')
 	=> 0 
 	
3)  size?(file_name) → Integer or nil -- Returns nil if file_name doesn't exist or has zero size, the size of the file otherwise.
	3.0.0 :001 > File.size?('sample.socket')
	 => nil 
	3.0.0 :002 > File.size?('sample.txt')
	 => 6 

4) size() -   Returns the size (bytes) of self.

3.0.0 :005 > File.new('sample.socket').size
 => 0 
3.0.0 :006 > File.new('sample.txt').size
 => 6  	

--------------------------------------------------Settings Methods -------------------------------------------------------	

1) ::chmod - Changes permissions of the file at the given path. Returns the number of files processed.
-- chmod(mode_int, file_name, ... ) → integer

3.0.0 :014 > File.chmod(0644, 'sample.txt')
 => 1 

2) chown(owner_int, group_int, file_name, ...) → integer -- Changes the owner and group of the named file(s) to the given numeric owner and group id's. 


3)  rename(old_name, new_name) → 0 -- Renames the given file to the new name. Raises a SystemCallError if the file cannot be renamed.

3.0.0 :015 > File.rename('sample.socket', 'sample.txt')
 => 0
 
 
 ---------------------------------------------Delete methods ------------------------------------
1) ::truncate --  Truncates the file at the given file path to the given size.

 truncate(file_name, integer) → 0

Truncates the file file_name to be at most integer bytes long.

		3.0.0 :022 > f = File.new('sample.txt', 'w')
		 => #<File:sample.txt> 
		3.0.0 :023 > f.write('1234567890')
		 => 10 
		3.0.0 :024 > f.close
		 => nil 
		 3.0.0 :026 > File.truncate('sample.txt', 5)            #67890 deleted
		 => 0 
		3.0.0 :027 > File.size('sample.txt')
		 => 5 
		 
2)  truncate(integer) → 0 -- Truncates file to at most integer bytes. The file must be opened for writing

3.0.0 :034 > f = File.new('sample.txt', 'w')
 => #<File:sample.txt> 
3.0.0 :035 > f.write('1234567890')
 => 10 
3.0.0 :036 > f.truncate(5)              #67890 deleted
 => 0 
3.0.0 :037 > f.size
 => 5 


3) ::unlink (aliased as ::delete) --     Deletes the file for each given file path.

 unlink(file_name, ...) → integer  or delete(file_name, ...) → integer 

Deletes the named files, returning the number of names passed as arguments. Raises an exception on any error.
 
 3.0.0 :028 > File.delete('sample5.txt')
 => 1 
 
 


		 


	
