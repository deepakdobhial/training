---------------------------------------------------ASSIGNMENT------------------------------------------
1) CREATE DATABASE -  AIRLINE FLIGHTS

	--> 	create database airline_flights;
		CREATE DATABASE
		
2) SELECT DATABASE- AIRLINE FLIGHTS

	--> 	\c airline_flights ;
		You are now connected to database "airline_flights" as user "postgres".
		
	
----------------------------------------------TABLES----------------------------------

1) CREATE FLIGHT TABLE -

		 airline_flights=# create table flights
		(flno int not null primary key,"from" varchar(70) not null,"to" varchar(70) not null,distance int not null,departs timetz 			not null,arrives timetz not null,price int not null);
		CREATE TABLE

			
		1.1) TABLE DESCRIPTION -   airline_flights=# \d flights;
		
					      Table "public.flights"
			  Column  |         Type          | Collation | Nullable | Default 
			----------+-----------------------+-----------+----------+---------
			 flno     | integer               |           | not null | 
			 from     | character varying(70) |           | not null | 
			 to       | character varying(70) |           | not null | 
			 distance | integer               |           | not null | 
			 departs  | time with time zone   |           | not null | 
			 arrives  | time with time zone   |           | not null | 
			 price    | integer               |           | not null | 
			Indexes:
			    "flights_pkey" PRIMARY KEY, btree (flno)
			    
2) CREATE AIRCRAFT TABLE -

		airline_flights=# create table aircraft 
		airline_flights-# (aid int not null primary key,aname varchar(100) not null, cruisingrange int not null);
		CREATE TABLE

		2.1) TABLE DESCRIPTION -	airline_flights=# \d aircraft;
				
							 Table "public.aircraft"
				    Column     |          Type          | Collation | Nullable | Default 
				---------------+------------------------+-----------+----------+---------
				 aid           | integer                |           | not null | 
				 aname         | character varying(100) |           | not null | 
				 cruisingrange | integer                |           | not null | 
				Indexes:
				    "aircraft_pkey" PRIMARY KEY, btree (aid)
				
3) CREATE EMPLOYEES TABLE - 

		   airline_flights=# create table employees
		   airline_flights-# (eid int not null primary key,ename varchar(30) not null,salary int);
		   CREATE TABLE

		   3.1) TABLE DESCRIPTION -	airline_flights=# \d employees;
						
						    Table "public.employees"
				 Column |         Type          | Collation | Nullable | Default 
				--------+-----------------------+-----------+----------+---------
				 eid    | integer               |           | not null | 
				 ename  | character varying(30) |           | not null | 
				 salary | integer               |           |          | 
				Indexes:
				    "employees_pkey" PRIMARY KEY, btree (eid)
			
4) CREATE CERTIFIED TABLE - 

		  airline_flights=# create table certified
				  (eid int not null,aid int not null,
				  primary key(eid,aid),
				  constraint certified_fkey_eid foreign key(eid) references employees(eid) on delete cascade on update 					  cascade,
				  constraint certified_fkey_aid foreign key(aid) references aircraft(aid) on delete cascade on update 					  cascade);
			CREATE TABLE
			

		4.1) TABLE DESCRIPTION -    airline_flights=# \d certified;
		
					     Table "public.certified"
				 Column |  Type   | Collation | Nullable | Default 
				--------+---------+-----------+----------+---------
				 eid    | integer |           | not null | 
				 aid    | integer |           | not null | 
				Indexes:
				    "certified_pkey" PRIMARY KEY, btree (eid, aid)
				Foreign-key constraints:
		               "certified_fkey_aid" FOREIGN KEY (aid) REFERENCES aircraft(aid) ON UPDATE CASCADE ON DELETE CASCADE
			      "certified_fkey_eid" FOREIGN KEY (eid) REFERENCES employees(eid) ON UPDATE CASCADE ON DELETE CASCADE	    
				    
				    
				    
-------------------------------------------------INSERT DATA INTO TABLES---------------------------------------------------

1) INSERT DATA INTO FLIGHTS

			airline_flights=# insert into flights
			airline_flights-# values
			airline_flights-# (1001,'Los Angeles','Honolulu','4113','07:00','12:05',300),
			airline_flights-# (1002,'Los Angeles','Honolulu','4113','08:05','12:02',500),
			airline_flights-# (1003,'Los Angeles','Honolulu','4113','09:50','14:56',200),
			airline_flights-# (1004,'Los Angeles','Honolulu','4113','13:15','19:13',190),
			airline_flights-# (1005,'Los Angeles','Chicago', '2818','08:45','14:54',300),
			airline_flights-# (1006,'Los Angeles','Chicago', '2818','14:20','20:00',250),
			airline_flights-# (1007,'Los Angeles','Chicago', '2818','16:30','20:05',700),
			airline_flights-# (1008,'Los Angeles','Chicago', '2818','17:00','21:05',800),
			airline_flights-# (1009,'Los Angeles','San Francisco','543','06:00','07:30',150),
			airline_flights-# (1010,'Los Angeles','San Francisco','543','06:10','07:15',200),
			airline_flights-# (1011,'Los Angeles','San Francisco','543','11:00','13:05',100),
			airline_flights-# (1012,'Los Angeles','San Francisco','543','12:00','14:05',100),
			airline_flights-# (1013,'San Francisco','Honolulu','3860','08:40','12:13',200),
			airline_flights-# (1014,'San Francisco','Honolulu','3860','14:00','17:05',500),
			airline_flights-# (1015,'San Francisco','Honolulu','3860','15:00','18:05',600),
			airline_flights-# (1016,'San Francisco','Honolulu','3860','15:00','19:05',200),
			airline_flights-# (1017,'Madison',      'New York','1320','08:00','11:05',700),
			airline_flights-# (1018,'Madison',      'New York','1320','09:00','12:05',700),
			airline_flights-# (1019,'Madison',      'New York','1320','11:15','01:50',900),
			airline_flights-# (1020,'Madison',      'New York','1320','15:00','17:40',500),
			airline_flights-# (1021,'Madison',      'Chicago','438',  '07:00','08:05',200),
			airline_flights-# (1022,'Madison',      'Chicago','438','10:00','11:05',190),
			airline_flights-# (1023,'Madison',      'Chicago','438','13:00','14:45',150),
			airline_flights-# (1024,'Madison',      'Chicago','438','15:00','17:30',100),
			airline_flights-# (1025,'Madison',      'Dallas','400','09:00','11:05',150),
			airline_flights-# (1026,'Madison',      'Dallas','400','11:30','12:15',200),
			airline_flights-# (1027,'Madison',      'Dallas','400','13:30','15:15',400),
			airline_flights-# (1028,'Dallas',       'Chicago','1000','12:30','14:25',200),
			airline_flights-# (1029,'Dallas',       'Chicago','1000','14:30','16:05',300),
			airline_flights-# (1030,'Chicago',     'New York','800','11:00','12:35',300),
			airline_flights-# (1031,'Chicago',     'New York','800','15:30','16:20',350),
			airline_flights-# (1032,'Chicago',     'New York','800','15:00','17:20',150),
			airline_flights-# (1033,'Chicago',     'New York','800','18:30','19:20',300);
			INSERT 0 33

--------->		airline_flights=# select * from flights;
		
			 flno |     from      |      to       | distance |    departs     |    arrives     | price 
			------+---------------+---------------+----------+----------------+----------------+-------
			 1001 | Los Angeles   | Honolulu      |     4113 | 07:00:00+05:30 | 12:05:00+05:30 |   300
			 1002 | Los Angeles   | Honolulu      |     4113 | 08:05:00+05:30 | 12:02:00+05:30 |   500
			 1003 | Los Angeles   | Honolulu      |     4113 | 09:50:00+05:30 | 14:56:00+05:30 |   200
			 1004 | Los Angeles   | Honolulu      |     4113 | 13:15:00+05:30 | 19:13:00+05:30 |   190
			 1005 | Los Angeles   | Chicago       |     2818 | 08:45:00+05:30 | 14:54:00+05:30 |   300
			 1006 | Los Angeles   | Chicago       |     2818 | 14:20:00+05:30 | 20:00:00+05:30 |   250
			 1007 | Los Angeles   | Chicago       |     2818 | 16:30:00+05:30 | 20:05:00+05:30 |   700
			 1008 | Los Angeles   | Chicago       |     2818 | 17:00:00+05:30 | 21:05:00+05:30 |   800
			 1009 | Los Angeles   | San Francisco |      543 | 06:00:00+05:30 | 07:30:00+05:30 |   150
			 1010 | Los Angeles   | San Francisco |      543 | 06:10:00+05:30 | 07:15:00+05:30 |   200
			 1011 | Los Angeles   | San Francisco |      543 | 11:00:00+05:30 | 13:05:00+05:30 |   100
			 1012 | Los Angeles   | San Francisco |      543 | 12:00:00+05:30 | 14:05:00+05:30 |   100
			 1013 | San Francisco | Honolulu      |     3860 | 08:40:00+05:30 | 12:13:00+05:30 |   200
			 1014 | San Francisco | Honolulu      |     3860 | 14:00:00+05:30 | 17:05:00+05:30 |   500
			 1015 | San Francisco | Honolulu      |     3860 | 15:00:00+05:30 | 18:05:00+05:30 |   600
			 1016 | San Francisco | Honolulu      |     3860 | 15:00:00+05:30 | 19:05:00+05:30 |   200
			 1017 | Madison       | New York      |     1320 | 08:00:00+05:30 | 11:05:00+05:30 |   700
			 1018 | Madison       | New York      |     1320 | 09:00:00+05:30 | 12:05:00+05:30 |   700
			 1019 | Madison       | New York      |     1320 | 11:15:00+05:30 | 01:50:00+05:30 |   900
			 1020 | Madison       | New York      |     1320 | 15:00:00+05:30 | 17:40:00+05:30 |   500
			 1021 | Madison       | Chicago       |      438 | 07:00:00+05:30 | 08:05:00+05:30 |   200
			 1022 | Madison       | Chicago       |      438 | 10:00:00+05:30 | 11:05:00+05:30 |   190
			 1023 | Madison       | Chicago       |      438 | 13:00:00+05:30 | 14:45:00+05:30 |   150
			 1024 | Madison       | Chicago       |      438 | 15:00:00+05:30 | 17:30:00+05:30 |   100
			 1025 | Madison       | Dallas        |      400 | 09:00:00+05:30 | 11:05:00+05:30 |   150
			 1026 | Madison       | Dallas        |      400 | 11:30:00+05:30 | 12:15:00+05:30 |   200
			 1027 | Madison       | Dallas        |      400 | 13:30:00+05:30 | 15:15:00+05:30 |   400
			 1028 | Dallas        | Chicago       |     1000 | 12:30:00+05:30 | 14:25:00+05:30 |   200
			 1029 | Dallas        | Chicago       |     1000 | 14:30:00+05:30 | 16:05:00+05:30 |   300
			 1030 | Chicago       | New York      |      800 | 11:00:00+05:30 | 12:35:00+05:30 |   300
			 1031 | Chicago       | New York      |      800 | 15:30:00+05:30 | 16:20:00+05:30 |   350
			 1032 | Chicago       | New York      |      800 | 15:00:00+05:30 | 17:20:00+05:30 |   150
			 1033 | Chicago       | New York      |      800 | 18:30:00+05:30 | 19:20:00+05:30 |   300
			(33 rows)
			

2) INSERT DATA INTO AIRCRAFT -

			airline_flights=# insert into aircraft
			airline_flights-# values
			airline_flights-# (101,'Airbus','1000'),
			airline_flights-# (102,'Boeing','4000'),
			airline_flights-# (103,'BAE Systems','4000'),
			airline_flights-# (104,'GE Aviation','6000'),
			airline_flights-# (105,'United Technologies','1000'),
			airline_flights-# (106,'General Electric','3000'),
			airline_flights-# (107,'Rolls-Royce','3000'),
			airline_flights-# (108,'L-3 Technologies','4000'),
			airline_flights-# (109,'United Aircraft','5000'),
			airline_flights-# (110,'AVIC','6000'),
			airline_flights-# (111,'GKN Aerospace','5000'),
			airline_flights-# (112,'Triumph Group','8000'),
			airline_flights-# (113,'ST Engineering','6000'),
			airline_flights-# (114,'Solvay Group','9000'),
			airline_flights-# (115,'SKF','1000'),
			airline_flights-# (116,'Air United','3000'),
			airline_flights-# (117,'Sky Jet','3500'),
			airline_flights-# (118,'Air New York','1000');
			INSERT 0 18
			
			
----------->  		 airline_flights=# select * from aircraft;

			 aid |        aname        | cruisingrange 
			-----+---------------------+---------------
			 101 | Airbus              |          1000
			 102 | Boeing              |          4000
			 103 | BAE Systems         |          4000
			 104 | GE Aviation         |          6000
			 105 | United Technologies |          1000
			 106 | General Electric    |          3000
			 107 | Rolls-Royce         |          3000
			 108 | L-3 Technologies    |          4000
			 109 | United Aircraft     |          5000
			 110 | AVIC                |          6000
			 111 | GKN Aerospace       |          5000
			 112 | Triumph Group       |          8000
			 113 | ST Engineering      |          6000
			 114 | Solvay Group        |          9000
			 115 | SKF                 |          1000
			 116 | Air United          |          3000
			 117 | Sky Jet             |          3500
			 118 | Air New York        |          1000
			(18 rows)

3) UPDATE AND INSERT MORE DATA INTO AIRCRAFT-

	Update-	airline_flights=# update aircraft
			airline_flights-# set aname='Boeing 777' where aid=102;
			UPDATE 1
			
	Insert-	airline_flights=# insert into aircraft
			airline_flights-# values
			airline_flights-# (119,'Boeing 101',3000),
			airline_flights-# (120,'Boeing 7',5000),
			airline_flights-# (121,'Boeing 400',4000);
			INSERT 0 3

			
--------->		airline_flights=# select * from aircraft;

			 aid |        aname        | cruisingrange 
			-----+---------------------+---------------
			 101 | Airbus              |          1000
			 103 | BAE Systems         |          4000
			 104 | GE Aviation         |          6000
			 105 | United Technologies |          1000
			 106 | General Electric    |          3000
			 107 | Rolls-Royce         |          3000
			 108 | L-3 Technologies    |          4000
			 109 | United Aircraft     |          5000
			 110 | AVIC                |          6000
			 111 | GKN Aerospace       |          5000
			 112 | Triumph Group       |          8000
			 113 | ST Engineering      |          6000
			 114 | Solvay Group        |          9000
			 115 | SKF                 |          1000
			 116 | Air United          |          3000
			 117 | Sky Jet             |          3500
			 118 | Air New York        |          1000
			 102 | Boeing 777          |          4000
			 119 | Boeing 101          |          3000
			 120 | Boeing 7            |          5000
			 121 | Boeing 400          |          4000
			(21 rows)
			
4) INSERT DATA INTO EMPLOYEES - 

			airline_flights=# insert into employees
			airline_flights-# values
			airline_flights-# (1,'Kevin Zacher',200000),
			airline_flights-# (2,'Victoria Mutenue',150000),
			airline_flights-# (3,'Pankaj Pandey',50000),
			airline_flights-# (4,'Mohit Dagar',90000),
			airline_flights-# (5,'Alexander',180000),
			airline_flights-# (6,'Krishna',80000),
			airline_flights-# (7,'Deepak',160000),
			airline_flights-# (8,'Jade',70000),
			airline_flights-# (9,'Ram Kishan',40000),
			airline_flights-# (10,'Rozar',15000),
			airline_flights-# (11,'Elena',60000),
			airline_flights-# (12,'Kane Williamson',260000),
			airline_flights-# (13,'Tim Boult',60000),
			airline_flights-# (14,'Tom Latham',40000),
			airline_flights-# (15,'Colin Murno',140000),
			airline_flights-# (16,'Rajiv Patel',300000),
			airline_flights-# (17,'Samual Zacher',100000),
			airline_flights-# (18,'Henry Nicholas',80000),
			airline_flights-# (19,'Nichol Mat',100000),
			airline_flights-# (20,'Weekti',60000);
			INSERT 0 20
			
			
-------> 		airline_flights=# select * from employees;

			 eid |      ename       | salary 
			-----+------------------+--------
			   1 | Kevin Zacher     | 200000
			   2 | Victoria Mutenue | 150000
			   3 | Pankaj Pandey    |  50000
			   4 | Mohit Dagar      |  90000
			   5 | Alexander        | 180000
			   6 | Krishna          |  80000
			   7 | Deepak           | 160000
			   8 | Jade             |  70000
			   9 | Ram Kishan       |  40000
			  10 | Rozar            |  15000
			  11 | Elena            |  60000
			  12 | Kane Williamson  | 260000
			  13 | Tim Boult        |  60000
			  14 | Tom Latham       |  40000
			  15 | Colin Murno      | 140000
			  16 | Rajiv Patel      | 300000
			  17 | Samual Zacher    | 100000
			  18 | Henry Nicholas   |  80000
			  19 | Nichol Mat       | 100000
			  20 | Weekti           |  60000
			(20 rows)
			
5) INSERT DATA INTO CERTIFIED -


			airline_flights=# insert into certified
			airline_flights-# values
			airline_flights-# (1,102),
			airline_flights-# (1,115),
			airline_flights-# (1,111),
			airline_flights-# (1,120),
			airline_flights-# (2,101),
			airline_flights-# (2,102),
			airline_flights-# (2,107),
			airline_flights-# (2,109),
			airline_flights-# (2,118),
			airline_flights-# (3,103),
			airline_flights-# (3,112),
			airline_flights-# (5,104),
			airline_flights-# (5,112),
			airline_flights-# (5,110),
			airline_flights-# (6,106),
			airline_flights-# (6,113),
			airline_flights-# (7,105),
			airline_flights-# (7,108),
			airline_flights-# (7,113),
			airline_flights-# (7,114),
			airline_flights-# (12,116),
			airline_flights-# (12,117),
			airline_flights-# (12,119),
			airline_flights-# (13,118),
			airline_flights-# (15,101),
			airline_flights-# (15,105),
			airline_flights-# (15,102),
			airline_flights-# (15,117),
			airline_flights-# (15,116),
			airline_flights-# (16,101),
			airline_flights-# (16,107),
			airline_flights-# (16,115),
			airline_flights-# (16,118),
			airline_flights-# (17,107),
			airline_flights-# (17,119),
			airline_flights-# (18,111),
			airline_flights-# (19,113),
			airline_flights-# (19,120);
			INSERT 0 38
			
------->		select * from certified;
				
			 eid | aid 
			-----+-----
			   1 | 102
			   1 | 115
			   1 | 111
			   1 | 120
			   2 | 101
			   2 | 102
			   2 | 107
			   2 | 109
			   2 | 118
			   3 | 103
			   3 | 112
			   5 | 104
			   5 | 112
			   5 | 110
			   6 | 106
			   6 | 113
			   7 | 105
			   7 | 108
			   7 | 113
			   7 | 114
			  12 | 116
			  12 | 117
			  12 | 119
			  13 | 118
			  15 | 101
			  15 | 105
			  15 | 102
			  15 | 117
			  15 | 116
			  16 | 101
			  16 | 107
			  16 | 115
			  16 | 118
			  17 | 107
			  17 | 119
			  18 | 111
			  19 | 113
			  19 | 120
			(38 rows)


6) Insert more data into employees

	airline_flights=# insert into employees
					airline_flights-# values
					airline_flights-# (21,'Saroj',150),
					airline_flights-# (22,'Angel',195),
					airline_flights-# (23,'Saroj',150);
					INSERT 0 3
					
					
-------->		airline_flights=# select * from employees;
			
			 eid |      ename       | salary 
			-----+------------------+--------
			   1 | Kevin Zacher     | 200000
			   2 | Victoria Mutenue | 150000
			   3 | Pankaj Pandey    |  50000
			   4 | Mohit Dagar      |  90000
			   5 | Alexander        | 180000
			   6 | Krishna          |  80000
			   7 | Deepak           | 160000
			   8 | Jade             |  70000
			   9 | Ram Kishan       |  40000
			  10 | Rozar            |  15000
			  11 | Elena            |  60000
			  12 | Kane Williamson  | 260000
			  13 | Tim Boult        |  60000
			  14 | Tom Latham       |  40000
			  15 | Colin Murno      | 140000
			  16 | Rajiv Patel      | 300000
			  17 | Samual Zacher    | 100000
			  18 | Henry Nicholas   |  80000
			  19 | Nichol Mat       | 100000
			  20 | Weekti           |  60000
			  21 | Saroj            |    150
			  22 | Angel            |    195
			  23 | Saroj            |    150
			(23 rows)

7) Update table flights-

			airline_flights=# update flights                                 
			set distance=5000 where flno=1006;
			UPDATE 1
			
			airline_flights=# update flights                                 
			set distance=3000 where flno=1007;
			UPDATE 1
			
			airline_flights=# select flno,"from","to",distance from flights where "from"='Los Angeles' and "to"='Chicago';
			 flno |    from     |   to    | distance 
			------+-------------+---------+----------
			 1005 | Los Angeles | Chicago |     2818
			 1008 | Los Angeles | Chicago |     2818
			 1006 | Los Angeles | Chicago |     5000
			 1007 | Los Angeles | Chicago |     3000
			(4 rows)

8) Update table employees

			airline_flights=# update employees
			airline_flights-# set salary=170000 where eid=4;
			UPDATE 1

9) Update table flights

			airline_flights=# update flights
			set distance=10000 where flno=1009;
			UPDATE 1
			airline_flights=# update flights
			set distance=10000 where flno=1010;
			UPDATE 1
			airline_flights=# update flights
			set distance=10000 where flno=1011;
			UPDATE 1
			airline_flights=# update flights
			set distance=10000 where flno=1012;
			UPDATE 1



---------------------------------------------------------QUERIES---------------------------------------------------

a) Find the names of aircraft such that all pilots certified to operate them earn more than $80,000.

airline_flights=# select distinct aname from aircraft natural join certified natural join employees where aid not in(select distinct aid from aircraft natural join certified natural join employees where salary<=80000 order by aid) order by aname;
        aname        
---------------------
 Airbus
 Air United
 AVIC
 Boeing 101
 Boeing 7
 Boeing 777
 GE Aviation
 L-3 Technologies
 Rolls-Royce
 SKF
 Sky Jet
 Solvay Group
 United Aircraft
 United Technologies
(14 rows)



b) For each pilot who is certified for more than three aircraft, find the eid and the maximum cruisingrange of the aircraft for which she or he is certified.

airline_flights=# select c.eid,max(a.cruisingrange) as maximum_cruisingrange from aircraft as a inner join certified as c on a.aid=c.aid group by c.eid having count(c.aid)>3 order by c.eid;

 eid | maximum_cruisingrange 
-----+-----------------------
   1 |                  5000
   2 |                  5000
   7 |                  9000
  15 |                  4000
  16 |                  3000
(5 rows)


c) Find the names of pilots whose salary is less than the price of the cheapest route from Los Angeles to Honolulu.

		airline_flights=# select ename from employees natural join certified where salary<(select max(price) from flights where 			"from"='Los Angeles' and "to"='Honolulu')group by ename;
		
			     ename     
			---------------
			 Tim Boult
			 Pankaj Pandey
			(2 rows)


d) For all aircraft with cruisingrange over 1000 miles, find the name of the aircraft and the average salary of all pilots certified for 		this aircraft. 


			airline_flights=# select a.aname,round(avg(e.salary),2) as average_salary from aircraft as a inner join certified 				as c on a.aid=c.aid inner join employees as e on e.eid=c.eid group by a.aname,a.cruisingrange having 			a.cruisingrange>1000 order by a.aname;
			
			
		      aname       | average_salary 
		------------------+----------------
		 Air United       |      200000.00
		 AVIC             |      180000.00
		 BAE Systems      |       50000.00
		 Boeing 101       |      180000.00
		 Boeing 7         |      150000.00
		 Boeing 777       |      163333.33
		 GE Aviation      |      180000.00
		 General Electric |       80000.00
		 GKN Aerospace    |      140000.00
		 L-3 Technologies |      160000.00
		 Rolls-Royce      |      183333.33
		 Sky Jet          |      200000.00
		 Solvay Group     |      160000.00
		 ST Engineering   |      113333.33
		 Triumph Group    |      115000.00
		 United Aircraft  |      150000.00
		(16 rows)

e) Find the names of pilots certified for some Boeing aircraft.

		airline_flights=# select distinct e.ename from employees as e inner join certified as c on e.eid=c.eid inner join 			aircraft as a on a.aid=c.aid where a.aname like 'Boeing%' order by e.ename;
		
		      ename       
		------------------
		 Colin Murno
		 Kane Williamson
		 Kevin Zacher
		 Nichol Mat
		 Samual Zacher
		 Victoria Mutenue
		(6 rows)

f) Find the aids of all aircraft that can be used on routes from Los Angeles to Chicago

		airline_flights=# select aid as aircraft_id from aircraft where cruisingrange>=(select min(distance) from flights  where  			"from"='Los Angeles' and "to"='Chicago') order by aid; 
					
			 aircraft_id 
			------------
			 102
			 103
			 104
			 106
			 107
			 108
			 109
			 110
			 111
			 112
			 113
			 114
			 116
			 117
			 119
			 120
			 121
			(17 rows)
			
g) Identify the routes that can be piloted by every pilot who makes more than $100,000.

			airline_flights=# select distinct "from","to" from flights where distance <=(select max(cruisingrange) from 			employees natural join certified natural join aircraft where salary>100000);

			     from      |    to    
			---------------+----------
			 San Francisco | Honolulu
			 Los Angeles   | Honolulu
			 Madison       | Dallas
			 Madison       | Chicago
			 Madison       | New York
			 Dallas        | Chicago
			 Los Angeles   | Chicago
			 Chicago       | New York
			(8 rows)

			
h)Print the enames of pilots who can operate planes with cruisingrange greaterthan 3000 miles but are not certified on any Boeing   aircraft. 

		select distinct ename from employees natural join certified natural join aircraft group by ename having ename not 			in(select e.ename from aircraft as a inner join certified as c on c.aid=a.aid inner join employees as e on e.eid=c.eid 			where aname like 'Boeing%') and min(cruisingrange)>3000 order by ename;
		
			     ename      
			----------------
			 Alexander
			 Henry Nicholas
			 Pankaj Pandey
			(3 rows)

j) Compute the difference between the average salary of a pilot and the average salary of all employees (including pilots).

		airline_flights=# select pilot_avg_salary,round(avg(salary),2) as employees_avg_salary from(select round(avg(salary),2) as pilot_avg_salary from employees natural inner join certified) as pilot_salary cross join employees group by pilot_avg_salary; 
	 
			 pilot_avg_salary | employees_avg_salary 
			------------------+----------------------
				163421.05 |            100673.70
			(1 row)
	


						
k) Print the name and salary of every nonpilot whose salary is more than the average salary for pilots. 	

	airline_flights=# select ename as employee_name,salary from employees where eid not in(select eid from employees natural join       certified) and salary>(select avg(salary) from employees natural join certified);
	
	
			 employee_name | salary 
			---------------+--------
			 Mohit Dagar   | 170000
			(1 row)

		
			
l) Print the names of employees who are certified only on aircrafts with cruising range longer than 1000 miles.

		airline_flights=# select distinct e.ename from employees as e inner join certified as c on c.eid=e.eid inner join aircraft as a on a.aid=c.aid group by e.ename having min(a.cruisingrange)>1000 order by e.ename;
		
					
			      ename      
			-----------------
			 Alexander
			 Henry Nicholas
			 Kane Williamson
			 Krishna
			 Nichol Mat
			 Pankaj Pandey
			 Samual Zacher
			(7 rows)
m) Print the names of employees who are certified only on aircrafts with cruising range longer than 1000 miles, but on at least two such aircrafts	

			airline_flights=# select employee_name from(select ename as employee_name from employees natural join certified natural join aircraft where cruisingrange>1000) as employees_details group by employee_name having count(*)>1 order by employee_name;
				  
				  employee_name   
				------------------
				 Alexander
				 Colin Murno
				 Deepak
				 Kane Williamson
				 Kevin Zacher
				 Krishna
				 Nichol Mat
				 Pankaj Pandey
				 Samual Zacher
				 Victoria Mutenue
				(10 rows)


	
			
n)Print the names of employees who are certified only on aircrafts with cruising range longer than 1000 miles and who are certified on some Boeing aircraft


		airline_flights=# select distinct ename from employees natural join certified natural join aircraft group by ename having 			ename in(select e.ename from aircraft as a inner join certified as c on c.aid=a.aid inner join employees as e on 			e.eid=c.eid where aname like 'Boeing%') and min(cruisingrange)>1000 order by ename;
     
				     
				      ename      
				-----------------
				 Kane Williamson
				 Nichol Mat
				 Samual Zacher
				(3 rows)




		    


