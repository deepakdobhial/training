1. Install git

	syntax: sudo apt install git-all
	syntax: git --version (2.25.1)
	

2. Set a Git username:

		$ git config --global user.name  "User_name"
		$ git config --global user.email email_id@website.com
		
3. Confirm that you have set the Git username correctly:

		$ git config --global user.name
			> User_name
			
4. Confirm that you have set the Git email correctly:

		$ git config --global user.email
			> email_id@website.com

5. Checking Your Settings
		Syntax: $ git config --list
		Output: user.name=User_name
			user.email=email_id@website.com
			color.status=auto
			color.branch=auto
			color.interactive=auto
			color.diff=auto

6. Getting a Git Repository

		You typically obtain a Git repository in one of two ways:

    		i) (using init) You can take a local directory that is currently not under version control, and turn it into a Git 				repository, or

    		ii) you can clone an existing Git repository from elsewhere
    		
    	6.1) Initializing a Repository
    		first go to dir. (using cd)
    		
    		syntax:~/dir$ git init 
    		output: Initialized empty Git repository in /home/beryl/practic repo/.git/
    		
    		6.1.1) Check git status
    		
    		      syntax: $ git status
		      Output: On branch master

				No commits yet

				Untracked files:
				  (use "git add <file>..." to include in what will be committed)
					1.txt
					2.txt

				nothing added to commit but untracked files present (use "git add" to track)
				
	
	6.2) Stage/Track all files in project folder (Modify, updated or deleted files no need add again just commit directly)
	
 		syntax: git add . or add -A (track all files in dir)   or git add file.txt file2.txt (track only these 																files)		
    			
    		6.2.1) Check git status
    			syntax: $ git status
			output: On branch master

					No commits yet

					Changes to be committed:
					  (use "git rm --cached <file>..." to unstage)
						new file:   1.txt
						new file:   2.txt
						
	6.3) Unstage files using git reset and restore
		
		syntax: git reset
		
		syntax: git restore --staged filename.txt
		
		

7. After staged files, Commit in repository 
	
		7.1) commit 
			syntax: git commit - m "First commit adding 1.txt and 2.txt"
			output: [master (root-commit) 3fe43e8] first commit adding 1.txt and 2.txt
				 2 files changed, 4 insertions(+)
				 create mode 100644 1.txt
				 create mode 100644 2.txt
				 
		7.2) 	check status
			syntax: $ git status
			Output: On branch master
				nothing to commit, working tree clean
				
		7.3) summery for commit
			
			syntax: $ git log  or git log master
			
			output: commit 83a0f9c35639430c0f4c10c3dbc3fc2edd63fe6a (HEAD -> master)  (hash id generated)
				Author: User_name <email_id@website.com>
				Date:   Thu Dec 23 10:37:13 2021 +0530
				
		7.4) show all details with commit id 
		
			syntax: git show 83a0f9c3 (first 8 & 9 char of hash id)
		
			output: commit 83a0f9c35639430c0f4c10c3dbc3fc2edd63fe6a (HEAD -> master)  (hash id generated)
				Author: User_name <email_id@website.com>
				Date:   Thu Dec 23 10:37:13 2021 +0530
				
				Adding

				diff --git a/1.txt b/1.txt
				new file mode 100644
				index 0000000..00d3796
				--- /dev/null
				+++ b/1.txt
				@@ -0,0 +1,2 @@
				+This is file generated by  nano 
				+and....
				diff --git a/2.txt b/2.txt
				new file mode 100644
				index 0000000..b0c5a93
				--- /dev/null
				+++ b/2.txt
				@@ -0,0 +1,3 @@
				+this file generated by vi ediotor 
				+and ...
				+
				:
				
   		7.3) Unstage files using git reset
		
		syntax: git revert
		
	
    		
8) change master branch name 
		
		8.1) syntax: git branch
		     output: * master
		
		8.2) syntax: git branch -M main
		
		8.3) syntax: git branch
		     output: * main
		     

    		
8. create repository

		8.1 ) go to github.com>login>create repository>copy ssh
			
9. linking with remote repository with local repository Pushing our changes to remote repository. 
		
		9.1) syntax:  git remote add origin ssh key
		
		9.2) check remote repository link with local
			
			syntax: git remote -v 
			
			output: origin	git@github.com:User_name/IInd-repo.git (fetch)  created alias(copy) of remote repository (origin)
				origin	git@github.com:User_name/IInd-repo.git (push)
				
10. Sink/Push local to remote repository (		
		10.1) To push changes to your local repository to remote repository
		
			syntax: git push origin master     (origin-alias of remote and master-branch where need push) defualt master
			
		10.2) check files local repository 
			
			syntax : git ls-files
			output:  show files that are in local repsitory
					
			
						
	
11. Braching : 

	11.1) list out all the branches inside in your local repository
		
		syntax: git branch  (list out all the branches inside in your local repository)
	      	output: *master     ( * means currently active)
	
	11.2) syntax: git status  (show also at which branch you are connected)
	      output: On branch master 
	      	       ............
	      	       
	11.3) creating new branch from master branch
	
		11.3.1) syntax: git branch branchname (create branch)
		
		11.3.2) syntax: git branch  (list out all the branches inside in your local repository)
	      		output: branchname
	      			*master     ( * means currently active)
	
	11.4) switch to other branch 
		
		11.4.1) syntax: git checkout or switch branchname
			output: switched to branch 'branchname' 
		
		11.4.2) syntax: git branch  (list out all the branches inside in your local repository)
	      		output: *branchname  ( * means currently active) 
	      			 master     
		11.4.3) creat a file vi filename.txt 
		
		11.4.4) git add filename.txt, git commit -m "message"
		
		11.4.5) git status
		
		11.4.6) git log branchname 
		
			output:  list of all commit (including master)
			
			
			
			
12. Track files in particular branch

	12.1) syntax: git checkout master (active master branch)
		
		12.1.1) syntax: git ls-files
			output: 1.txt
				2.txt
				
	12.2) syntax: git checkout branchname (active branchname branch)
	
		12.2.2) syntax: git ls-files
			output: 1.txt
				2.txt
				3.branch.txt			
			
			
			
13. Merge branch into master (Two ways : - git merge and git rebase)

	13.1) Using merge (first active master branch(where u want merge))  (Merge intgrates the changes made in different branches to 																	single branch)
		
		13.1.1) syntax: git merge branchname	
			
			output: Updating 682c892..30c3634
				Fast-forward
				branch1.txt | 4 ++++
				1 file changed, 4 insertions(+)
				create mode 100644 branch1.txt
				
		13.2.1) syntax: git log, git status and git ls-files
		
	
	13.2) delete a branch local
		syntax: git branch -d <local-branch>
		
		synatx: $ git branch -D <local-branch>
	
	13.3)  Delete a remote branch 
		syntax: $ git push origin --delete <remote-branch-name>
	
		
		
	13.2) Using Respo ( 	
	
	
	
	
14) Pull data from remote to local
	
	14.1) syntax: git pull origin master
	      output:  remote: Enumerating objects: 5, done.
			remote: Counting objects: 100% (5/5), done.
			remote: Compressing objects: 100% (2/2), done.
			remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
			Unpacking objects: 100% (3/3), 669 bytes | 334.00 KiB/s, done.
			From github.com:deepakdobhial/IInd-repo
			 * branch            master     -> FETCH_HEAD
			   99c4451..a4d4fcd  master     -> origin/master
			Updating 99c4451..a4d4fcd
			Fast-forward
			 branch1.txt | 2 +-
			 1 file changed, 1 insertion(+), 1 deletion(-)
			 
			 
15.) clone repository from remote to origin

	15.1) syntax: git clone ssh key(preference) or https://...........
	      
	      output:  Cloning into 'first-repo'...
			remote: Enumerating objects: 4, done.
			remote: Counting objects: 100% (4/4), done.
			remote: Compressing objects: 100% (2/2), done.
			remote: Total 4 (delta 0), reused 4 (delta 0), pack-reused 0
			Unpacking objects: 100% (4/4), 317 bytes | 317.00 KiB/s, done. 
			
18.) Deleting files and repository

	16.1) Delete local repository files (using git rm)
		
			i) syntax: git rm filename.txt (Remove file and also staged it means perfome git add .)
			   output: rm '1.txt' 
			
			ii) syntax: git status
			    output: On branch main
				Your branch is up to date with 'origin/main'.

				Changes to be committed:
  				(use "git restore --staged <file>..." to unstage)
				deleted:    1.txt
				
	16.2) Delete local repository files (using rm) (it will not permanently delete the file from the Git. It can be tracked in the 									staging area.)
		
		     	 i)  syntax: rm filename.txt (Remove file but keep it unstaged)
		     	     output: rm '1.txt' 
			
			ii)  syntax: git status
			     output: On branch main
				     Your branch is up to date with 'origin/main'.

				     Changes not staged for commit:
				     (use "git add/rm <file>..." to update what will be committed)
				     (use "git restore <file>..." to discard changes in working directory)
					deleted:    2.txt
			
			iii) reterive file from unstaged 
			
				syntax: git restore filename.txt
					
					
					
					
	16.3) Delete remote repository file
	
			syntax: git rm -cached filename.txt
		




				
17.) Checkout command (reterive files )

			syntax: git checkout filename.txt (reterive deleted file)
			
			syntax: git checkout -f    (reterive all from first commit)


18.) Deleting and Adding remote origin
	
		17.1) Deleting 
			
			syntax: git remote rm(remove) origin (remote name)
		
		17.2)  Adding new remote 
		
			Syntax: git remote add origin(remote name) ssh_key_url 
			
			
19. Undo commits 

	1) git reset (soft hard and mixed ) - Undo last commit and reset head. 
			
		Syntax: git reset commitrefid  (git reset 99c4451) reset all commit before this include this one)
		syntax: $ git reset --soft HEAD~1  (undo last commit) 
			      reset --hard HEAD~1
			      reset --mixed HEAD~1
			      
		
	2)  GIT REVERT (undo last commit (basically create new commit with undo opearations)
	
		syntax: git revert HEAD or HEAD~1or2or3 (2 commit revert)
	
		syntax: git revert 99c4451 
		
		
	3) Git commit --amend (used for update commit msg)

		commit --amend is used to modify the most recent commit.

		It combines changes in the staging environment with the latest commit, and creates a new commit.

		This new commit replaces the latest commit entirely.
		
		
		syntax: git commit --amend 
		
		
	4) Checkout command (reterive files )

			syntax: git checkout filename.txt (reterive deleted file)
			
			syntax: git checkout -f    (reterive all from first commit)

		
		
		
20.)  remove files from remote

		syntax: git rm --cached filename.txt
			
			git commit -a -m "delete remote file"
			
			git push origin master
			
			
			
			
21.) Clone a Specific Branch

	syntax: git clone --branch or -b  <branchname> --single-branch sshkey
			
			
			
			
			
			
			---------------------Types of Git Merge Conflicts------------------
			 

There are two points when a merge can enter a conflicted state:
1. Starting the Merge Process 

If there are changes in the working directory’s stage area for the current project, merging won’t start. 

In this case, conflicts happen due to pending changes that need to be stabilized using different Git commands.
2. During the Merge Process

The failure during the merge process indicates that there is a conflict between the local branch and the branch being merged.

In this case, Git resolves as much as possible, but there are things that have to be resolved manually in the conflicted files.

We will now go over resolving merge conflicts in Git.
How to Resolve Merge Conflicts in Git?

There are a few steps that could reduce the steps needed to resolve merge conflicts in Git.

    The easiest way to resolve a conflicted file is to open it and make any necessary changes
    After editing the file, we can use the git add a command to stage the new merged content
    The final step is to create a new commit with the help of the git commit command
    Git will create a new merge commit to finalize the merge

Git Commands to Resolve Conflicts
1. git log --merge 

	The git log --merge command helps to produce the list of commits that are causing the conflict
2. git diff 

	The git diff command helps to identify the differences between the states repositories or files
3. git checkout 

	The git checkout command is used to undo the changes made to the file, or for changing branches
4. git reset --mixed 

	The git reset --mixed command is used to undo changes to the working directory and staging area
5. git merge --abort

	The git merge --abort command helps in exiting the merge process and returning back to the state before the merging began
6. git reset

	The git reset command is used at the time of merge conflict to reset the conflicted files to their original state		
		
		 




read about - git commit -i (merge conflicts)

	     git fetch && git checkout ( fetch data and create branch)		









	
		
		
		
		
		
			
	 
							
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
